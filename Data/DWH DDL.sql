USE [DWH]
GO
/****** Object:  User [project_user]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE USER [project_user] FOR LOGIN [project_user] WITH DEFAULT_SCHEMA=[dbo]
GO
/****** Object:  User [WebAppUser]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE USER [WebAppUser] FOR LOGIN [WebAppUser] WITH DEFAULT_SCHEMA=[dbo]
GO
ALTER ROLE [db_datareader] ADD MEMBER [project_user]
GO
ALTER ROLE [db_datareader] ADD MEMBER [WebAppUser]
GO
/****** Object:  Schema [etl]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE SCHEMA [etl]
GO
/****** Object:  Schema [rpt]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE SCHEMA [rpt]
GO
/****** Object:  Schema [versions]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE SCHEMA [versions]
GO
/****** Object:  Table [dbo].[COUNTRIES]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[COUNTRIES](
	[COUNTRY_ID] [int] IDENTITY(1,1) NOT NULL,
	[C_ISO] [varchar](2) NULL,
	[C_ISO3] [varchar](3) NULL,
	[C_ISO_CODE] [smallint] NULL,
	[C_FIPS] [varchar](2) NULL,
	[C_DISPLAY_NAME] [varchar](50) NULL,
	[C_OFFICIAL_NAME] [varchar](100) NULL,
	[C_CAPITAL] [varchar](50) NULL,
	[C_CONTINENT] [varchar](50) NULL,
	[C_CURRENCYCODE] [varchar](50) NULL,
	[C_CURRENCYNAME] [varchar](50) NULL,
	[C_PHONE] [varchar](50) NULL,
	[C_REGION_CODE] [tinyint] NULL,
	[C_REGION_NAME] [varchar](50) NULL,
	[C_SUB_REGION_CODE] [smallint] NULL,
	[C_SUB_REGION_NAME] [varchar](50) NULL,
	[C_INTERMEDIATE_REGION_CODE] [smallint] NULL,
	[C_INTERMEDIATE_REGION_NAME] [varchar](50) NULL,
	[C_STATUS] [varchar](50) NULL,
	[C_DEVELOPED_OR_DEVELOPING] [varchar](50) NULL,
	[C_SMALL_ISLAND_DEVELOPING_STATES_SIDS] [bit] NULL,
	[C_LAND_LOCKED_DEVELOPING_COUNTRIES_LLDC] [bit] NULL,
	[C_LEAST_DEVELOPED_COUNTRIES_LDC] [bit] NULL,
	[C_AREA_SQKM] [decimal](18, 4) NULL,
	[C_POPULATION] [int] NULL,
 CONSTRAINT [PK_COUNTRIES] PRIMARY KEY CLUSTERED 
(
	[COUNTRY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[CountriesList]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW [dbo].[CountriesList]
AS
SELECT	
	C_DISPLAY_NAME
	,COUNTRY_ID
FROM dbo.COUNTRIES
GO
/****** Object:  UserDefinedFunction [dbo].[SelectString]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE FUNCTION [dbo].[SelectString]
(	
	@sql Varchar(max)
)
RETURNS TABLE 
AS
RETURN 
(
	SELECT @sql as String
)
GO
/****** Object:  View [dbo].[ELEMENTS_TO_CHART]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE view [dbo].[ELEMENTS_TO_CHART] AS (
	select 
		COLUMN_NAME
		,replace(substring(COLUMN_NAME,charindex('_',COLUMN_NAME),len(COLUMN_NAME)-charindex('_',COLUMN_NAME)+1),'_',' ') DESCRIPTIONS
	from INFORMATION_SCHEMA.COLUMNS a 
	where a.COLUMN_NAME not like '%_id' 
	and a.COLUMN_NAME not like 'id' 
	and TABLE_NAME not like 'ErrorLog' 
	and TABLE_NAME not like 'sysdiagrams'
	and TABLE_NAME not like 'countries' 
	and TABLE_NAME not like 'CountriesList'
	and TABLE_NAME not like 'INDEXES_BY_REGION'
	and TABLE_NAME not like 'POPULATION_FEMALE'
	and TABLE_NAME not like 'POPULATION_MALE'

)
GO
/****** Object:  View [dbo].[TABLES_WITH_FLAG]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE VIEW [dbo].[TABLES_WITH_FLAG]
AS
SELECT DISTINCT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS A WHERE A.COLUMN_NAME LIKE '%FLAG%' AND (TABLE_NAME NOT LIKE 'POPULATION_FEMALE' AND TABLE_NAME NOT LIKE 'POPULATION_MALE')
GO
/****** Object:  Table [dbo].[ErrorLog]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ErrorLog](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[ReferenceDate] [datetime2](7) NULL,
	[ErrorNumber] [int] NULL,
	[ErrorSeverity] [int] NULL,
	[ErrorState] [int] NULL,
	[ErrorProcedure] [varchar](200) NULL,
	[ErrorLine] [int] NULL,
	[ErrorMessage] [varchar](500) NULL,
	[StackTrace] [varchar](max) NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FERTILITY_RATES_ON_PERIOD]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FERTILITY_RATES_ON_PERIOD](
	[FROP_ID] [int] IDENTITY(1,1) NOT NULL,
	[FROP_COUNTRY_ID] [int] NOT NULL,
	[FROP_YEAR] [int] NOT NULL,
	[FROP_TOTAL_FLAG] [varchar](1) NULL,
	[FROP_STARTING_AGE] [int] NULL,
	[FROP_AGE_GROUP_INDICATOR] [varchar](1) NULL,
	[FROP_ENDING_AGE] [int] NULL,
	[FROP_FERTILITY_RATE] [decimal](18, 4) NULL,
 CONSTRAINT [PK_FERTILITY_RATES_ON_PERIOD] PRIMARY KEY CLUSTERED 
(
	[FROP_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UC_FERTILITY_RATES_ON_PERIOD] UNIQUE NONCLUSTERED 
(
	[FROP_COUNTRY_ID] ASC,
	[FROP_YEAR] ASC,
	[FROP_STARTING_AGE] ASC,
	[FROP_ENDING_AGE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INDEXES_BY_COUNTRY]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INDEXES_BY_COUNTRY](
	[IBC_ID] [int] IDENTITY(1,1) NOT NULL,
	[IBC_COUNTRY_ID] [int] NOT NULL,
	[IBC_YEAR] [int] NOT NULL,
	[IBC_GDP_PER_CAPITA] [decimal](18, 4) NULL,
	[IBC_DOMESTIC_CREDITS] [decimal](18, 4) NULL,
	[IBC_INCOME_INDEX] [decimal](18, 4) NULL,
	[IBC_ESTIMATED_GNI_FEMALE] [decimal](18, 4) NULL,
	[IBC_ESTIMATED_GNI_MALE] [decimal](18, 4) NULL,
	[IBC_GDP_TOTAL] [decimal](18, 4) NULL,
	[IBC_GNI_PERCAPITA] [decimal](18, 4) NULL,
	[IBC_GROSS_FIXED_CAPITAL_FORMATION] [decimal](18, 4) NULL,
	[IBC_LABOUR_SHARE_OF_GDP] [decimal](18, 4) NULL,
 CONSTRAINT [PK_INDEXES_BY_COUNTRY] PRIMARY KEY CLUSTERED 
(
	[IBC_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UC_INDEXES_BY_COUNTRY] UNIQUE NONCLUSTERED 
(
	[IBC_COUNTRY_ID] ASC,
	[IBC_YEAR] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[INDEXES_BY_REGION]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[INDEXES_BY_REGION](
	[IBR_ID] [int] IDENTITY(1,1) NOT NULL,
	[IBR_REGION] [varchar](256) NULL,
	[IBR_YEAR] [int] NOT NULL,
	[IBR_GDP_PER_CAPITA] [decimal](18, 4) NULL,
	[IBR_DOMESTIC_CREDITS] [decimal](18, 4) NULL,
	[IBR_INCOME_INDEX] [decimal](18, 4) NULL,
	[IBR_ESTIMATED_GNI_FEMALE] [decimal](18, 4) NULL,
	[IBR_ESTIMATED_GNI_MALE] [decimal](18, 4) NULL,
	[IBR_GDP_TOTAL] [decimal](18, 4) NULL,
	[IBR_GNI_PERCAPITA] [decimal](18, 4) NULL,
	[IBR_GROSS_FIXED_CAPITAL_FORMATION] [decimal](18, 4) NULL,
	[IBR_LABOUR_SHARE_OF_GDP] [decimal](18, 4) NULL,
 CONSTRAINT [PK_INDEXES_BY_REGION] PRIMARY KEY CLUSTERED 
(
	[IBR_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UC_INDEXES_BY_REGION] UNIQUE NONCLUSTERED 
(
	[IBR_REGION] ASC,
	[IBR_YEAR] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MORTALITY_LIFE_EXPECTANCY_FEMALE]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MORTALITY_LIFE_EXPECTANCY_FEMALE](
	[MLEF_ID] [int] IDENTITY(1,1) NOT NULL,
	[MLEF_COUNTRY_ID] [int] NOT NULL,
	[MLEF_YEAR] [int] NOT NULL,
	[MLEF_INFANT_MORTALITY_FEMALE] [decimal](18, 4) NULL,
	[MLEF_LIFE_EXPECTANCY_FEMALE] [decimal](18, 4) NULL,
	[MLEF_MORTALITY_RATE_1TO4_FEMALE] [decimal](18, 4) NULL,
	[MLEF_MORTALITY_RATE_UNDER5_FEMALE] [decimal](18, 4) NULL,
 CONSTRAINT [PK_MORTALITY_LIFE_EXPECTANCY_FEMALE] PRIMARY KEY CLUSTERED 
(
	[MLEF_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UC_MORTALITY_LIFE_EXPECTANCY_FEMALE] UNIQUE NONCLUSTERED 
(
	[MLEF_COUNTRY_ID] ASC,
	[MLEF_YEAR] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MORTALITY_LIFE_EXPECTANCY_MALE]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MORTALITY_LIFE_EXPECTANCY_MALE](
	[MLEM_ID] [int] IDENTITY(1,1) NOT NULL,
	[MLEM_COUNTRY_ID] [int] NOT NULL,
	[MLEM_YEAR] [int] NOT NULL,
	[MLEM_INFANT_MORTALITY_MALE] [decimal](18, 4) NULL,
	[MLEM_LIFE_EXPECTANCY_MALE] [decimal](18, 4) NULL,
	[MLEM_MORTALITY_RATE_1TO4_MALE] [decimal](18, 4) NULL,
	[MLEM_MORTALITY_RATE_UNDER5_MALE] [decimal](18, 4) NULL,
 CONSTRAINT [PK_MORTALITY_LIFE_EXPECTANCY_MALE] PRIMARY KEY CLUSTERED 
(
	[MLEM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UC_MORTALITY_LIFE_EXPECTANCY_MALE] UNIQUE NONCLUSTERED 
(
	[MLEM_COUNTRY_ID] ASC,
	[MLEM_YEAR] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[POPULATION_DEMOGRAPHIC_RATES_GENERAL]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[POPULATION_DEMOGRAPHIC_RATES_GENERAL](
	[PDRG_ID] [int] IDENTITY(1,1) NOT NULL,
	[PDRG_COUNTRY_ID] [int] NOT NULL,
	[PDRG_YEAR] [int] NOT NULL,
	[PDRG_INFANT_MORTALITY] [decimal](18, 4) NULL,
	[PDRG_LIFE_EXPECTANCY] [decimal](18, 4) NULL,
	[PDRG_MORTALITY_RATE_1TO4] [decimal](18, 4) NULL,
	[PDRG_MORTALITY_RATE_UNDER5] [decimal](18, 4) NULL,
	[PDRG_GROSS_REPRODUCTION_RATE] [decimal](18, 4) NULL,
	[PDRG_SEX_RATIO_AT_BIRTH] [decimal](18, 4) NULL,
	[PDRG_CRUDE_BIRTH_RATE] [decimal](18, 4) NULL,
	[PDRG_CRUDE_DEATH_RATE] [decimal](18, 4) NULL,
	[PDRG_GROWTH_RATE] [decimal](18, 4) NULL,
	[PDRG_NET_MIGRATION] [decimal](18, 4) NULL,
	[PDRG_RATE_NATURAL_INCREASE] [decimal](18, 4) NULL,
 CONSTRAINT [PK_POPULATION_DEMOGRAPHIC_RATES_GENERAL] PRIMARY KEY CLUSTERED 
(
	[PDRG_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[POPULATION_FEMALE]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[POPULATION_FEMALE](
	[PF_ID] [int] IDENTITY(1,1) NOT NULL,
	[PF_COUNTRY_ID] [int] NOT NULL,
	[PF_YEAR] [int] NOT NULL,
	[PF_MAX_AGE] [int] NULL,
	[PF_AGE_FLAG] [int] NULL,
	[PF_POPULATION_FEMALE] [decimal](18, 4) NULL,
 CONSTRAINT [PK_POPULATION_FEMALE] PRIMARY KEY CLUSTERED 
(
	[PF_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UC_POPULATION_FEMALE] UNIQUE NONCLUSTERED 
(
	[PF_COUNTRY_ID] ASC,
	[PF_YEAR] ASC,
	[PF_AGE_FLAG] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[POPULATION_FEMALE_ON_PERIOD]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[POPULATION_FEMALE_ON_PERIOD](
	[PF_ID] [int] IDENTITY(1,1) NOT NULL,
	[PF_COUNTRY_ID] [int] NOT NULL,
	[PF_YEAR] [int] NULL,
	[PF_TOTAL_FLAG] [varchar](1) NOT NULL,
	[PF_STARTING_AGE] [int] NULL,
	[PF_AGE_GROUP_INDICATOR] [varchar](1) NOT NULL,
	[PF_ENDING_AGE] [int] NULL,
	[PF_POPULATION_FEMALE] [decimal](38, 4) NULL,
 CONSTRAINT [PK_POPULATION_FEMALE_ON_PERIOD] PRIMARY KEY NONCLUSTERED 
(
	[PF_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_POPULATION_FEMALE_ON_PERION] UNIQUE NONCLUSTERED 
(
	[PF_COUNTRY_ID] ASC,
	[PF_YEAR] ASC,
	[PF_STARTING_AGE] ASC,
	[PF_ENDING_AGE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [IX_POPULATION_FEMALE_ON_PERION]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE UNIQUE CLUSTERED INDEX [IX_POPULATION_FEMALE_ON_PERION] ON [dbo].[POPULATION_FEMALE_ON_PERIOD]
(
	[PF_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[POPULATION_MALE]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[POPULATION_MALE](
	[PM_ID] [int] IDENTITY(1,1) NOT NULL,
	[PM_COUNTRY_ID] [int] NOT NULL,
	[PM_YEAR] [int] NOT NULL,
	[PM_MAX_AGE] [int] NULL,
	[PM_AGE_FLAG] [int] NULL,
	[PM_POPULATION_MALE] [decimal](18, 4) NULL,
 CONSTRAINT [PK_POPULATION_MALE] PRIMARY KEY CLUSTERED 
(
	[PM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[POPULATION_MALE_ON_PERIOD]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[POPULATION_MALE_ON_PERIOD](
	[PM_ID] [int] IDENTITY(1,1) NOT NULL,
	[PM_COUNTRY_ID] [int] NOT NULL,
	[PM_YEAR] [int] NULL,
	[PM_TOTAL_FLAG] [varchar](1) NOT NULL,
	[PM_STARTING_AGE] [int] NULL,
	[PM_AGE_GROUP_INDICATOR] [varchar](1) NOT NULL,
	[PM_ENDING_AGE] [int] NULL,
	[PM_POPULATION_FEMALE] [decimal](38, 4) NULL,
 CONSTRAINT [PK_POPULATION_MALE_ON_PERIOD] PRIMARY KEY CLUSTERED 
(
	[PM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UK_POPULATION_MALE_ON_PERION] UNIQUE NONCLUSTERED 
(
	[PM_COUNTRY_ID] ASC,
	[PM_YEAR] ASC,
	[PM_ENDING_AGE] ASC,
	[PM_STARTING_AGE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[POPULATION_MIDYAER_ON_PERIOD]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[POPULATION_MIDYAER_ON_PERIOD](
	[PMOP_ID] [int] IDENTITY(1,1) NOT NULL,
	[PMOP_COUNTRY_ID] [int] NOT NULL,
	[PMOP_YEAR] [int] NOT NULL,
	[PMOP_TOTAL_FLAG] [varchar](1) NULL,
	[PMOP_STARTING_AGE] [int] NULL,
	[PMOP_AGE_GROUP_INDICATOR] [varchar](1) NULL,
	[PMOP_ENDING_AGE] [int] NULL,
	[PMOP_MIDYEAR_POPULATION] [decimal](18, 4) NULL,
 CONSTRAINT [PK_POPULATION_MIDYAER_ON_PERIOD] PRIMARY KEY CLUSTERED 
(
	[PMOP_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UC_POPULATION_MIDYAER_ON_PERIOD] UNIQUE NONCLUSTERED 
(
	[PMOP_COUNTRY_ID] ASC,
	[PMOP_YEAR] ASC,
	[PMOP_STARTING_AGE] ASC,
	[PMOP_ENDING_AGE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[POPULATION_MIDYEAR_ON_PERIOD_FEMALE]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[POPULATION_MIDYEAR_ON_PERIOD_FEMALE](
	[PMOPF_ID] [int] IDENTITY(1,1) NOT NULL,
	[PMOPF_COUNTRY_ID] [int] NOT NULL,
	[PMOPF_YEAR] [int] NOT NULL,
	[PMOPF_TOTAL_FLAG] [varchar](1) NULL,
	[PMOPF_STARTING_AGE] [int] NULL,
	[PMOPF_AGE_GROUP_INDICATOR] [varchar](1) NULL,
	[PMOPF_ENDING_AGE] [int] NULL,
	[PMOPF_MIDYEAR_POPULATION_FEMALE] [decimal](18, 4) NULL,
 CONSTRAINT [PK_POPULATION_MIDYEAR_ON_PERIOD_FEMALE] PRIMARY KEY CLUSTERED 
(
	[PMOPF_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UC_POPULATION_MIDYEAR_ON_PERIOD_FEMALE] UNIQUE NONCLUSTERED 
(
	[PMOPF_COUNTRY_ID] ASC,
	[PMOPF_YEAR] ASC,
	[PMOPF_STARTING_AGE] ASC,
	[PMOPF_ENDING_AGE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[POPULATION_MIDYEAR_ON_PERIOD_MALE]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[POPULATION_MIDYEAR_ON_PERIOD_MALE](
	[PMOPM_ID] [int] IDENTITY(1,1) NOT NULL,
	[PMOPM_COUNTRY_ID] [int] NOT NULL,
	[PMOPM_YEAR] [int] NOT NULL,
	[PMOPM_TOTAL_FLAG] [varchar](1) NULL,
	[PMOPM_STARTING_AGE] [int] NULL,
	[PMOPM_AGE_GROUP_INDICATOR] [varchar](1) NULL,
	[PMOPM_ENDING_AGE] [int] NULL,
	[PMOPM_MIDYEAR_POPULATION_MALE] [decimal](18, 4) NULL,
 CONSTRAINT [PK_POPULATION_MIDYEAR_ON_PERIOD_MALE] PRIMARY KEY CLUSTERED 
(
	[PMOPM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY],
 CONSTRAINT [UC_POPULATION_MIDYEAR_ON_PERIOD_MALE] UNIQUE NONCLUSTERED 
(
	[PMOPM_COUNTRY_ID] ASC,
	[PMOPM_YEAR] ASC,
	[PMOPM_STARTING_AGE] ASC,
	[PMOPM_ENDING_AGE] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Index [IX_COUNTRIES]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_COUNTRIES] ON [dbo].[COUNTRIES]
(
	[COUNTRY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_ErrorLog]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_ErrorLog] ON [dbo].[ErrorLog]
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_COUTRY_ID]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE NONCLUSTERED INDEX [IX_COUTRY_ID] ON [dbo].[FERTILITY_RATES_ON_PERIOD]
(
	[FROP_COUNTRY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_FROP_ID]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_FROP_ID] ON [dbo].[FERTILITY_RATES_ON_PERIOD]
(
	[FROP_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_IBC_COUNTRY_ID]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE NONCLUSTERED INDEX [IX_IBC_COUNTRY_ID] ON [dbo].[INDEXES_BY_COUNTRY]
(
	[IBC_COUNTRY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_IBC_ID]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_IBC_ID] ON [dbo].[INDEXES_BY_COUNTRY]
(
	[IBC_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_IBR_ID]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_IBR_ID] ON [dbo].[INDEXES_BY_REGION]
(
	[IBR_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_MLEF_COUNTRY_ID]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE NONCLUSTERED INDEX [IX_MLEF_COUNTRY_ID] ON [dbo].[MORTALITY_LIFE_EXPECTANCY_FEMALE]
(
	[MLEF_COUNTRY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_MLEF_D]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_MLEF_D] ON [dbo].[MORTALITY_LIFE_EXPECTANCY_FEMALE]
(
	[MLEF_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_MLEM_COUNTRY_ID]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE NONCLUSTERED INDEX [IX_MLEM_COUNTRY_ID] ON [dbo].[MORTALITY_LIFE_EXPECTANCY_MALE]
(
	[MLEM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_MLEM_ID]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_MLEM_ID] ON [dbo].[MORTALITY_LIFE_EXPECTANCY_MALE]
(
	[MLEM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_PDRG_COUNTRY_ID]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE NONCLUSTERED INDEX [IX_PDRG_COUNTRY_ID] ON [dbo].[POPULATION_DEMOGRAPHIC_RATES_GENERAL]
(
	[PDRG_COUNTRY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_PDRG_ID]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_PDRG_ID] ON [dbo].[POPULATION_DEMOGRAPHIC_RATES_GENERAL]
(
	[PDRG_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_PF_COUNTRY_ID]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE NONCLUSTERED INDEX [IX_PF_COUNTRY_ID] ON [dbo].[POPULATION_FEMALE]
(
	[PF_COUNTRY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_PM_COUNTRY_ID]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE NONCLUSTERED INDEX [IX_PM_COUNTRY_ID] ON [dbo].[POPULATION_MALE]
(
	[PM_COUNTRY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_PM_ID]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_PM_ID] ON [dbo].[POPULATION_MALE]
(
	[PM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_POPULATION_MALE_ON_PERION]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_POPULATION_MALE_ON_PERION] ON [dbo].[POPULATION_MALE_ON_PERIOD]
(
	[PM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_PMOP_COUNTRY_ID]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE NONCLUSTERED INDEX [IX_PMOP_COUNTRY_ID] ON [dbo].[POPULATION_MIDYAER_ON_PERIOD]
(
	[PMOP_COUNTRY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_PMOP_ID]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_PMOP_ID] ON [dbo].[POPULATION_MIDYAER_ON_PERIOD]
(
	[PMOP_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_PMOPF_COUNTRY_ID]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE NONCLUSTERED INDEX [IX_PMOPF_COUNTRY_ID] ON [dbo].[POPULATION_MIDYEAR_ON_PERIOD_FEMALE]
(
	[PMOPF_COUNTRY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_PMOPF_ID]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_PMOPF_ID] ON [dbo].[POPULATION_MIDYEAR_ON_PERIOD_FEMALE]
(
	[PMOPF_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_PMOPM_COUNTRY_ID]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE NONCLUSTERED INDEX [IX_PMOPM_COUNTRY_ID] ON [dbo].[POPULATION_MIDYEAR_ON_PERIOD_MALE]
(
	[PMOPM_COUNTRY_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
/****** Object:  Index [IX_PMOPM_ID]    Script Date: 27/5/2023 1:14:05 πμ ******/
CREATE UNIQUE NONCLUSTERED INDEX [IX_PMOPM_ID] ON [dbo].[POPULATION_MIDYEAR_ON_PERIOD_MALE]
(
	[PMOPM_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
GO
ALTER TABLE [dbo].[FERTILITY_RATES_ON_PERIOD]  WITH CHECK ADD  CONSTRAINT [FK_FERTILITY_RATES_ON_PERIOD] FOREIGN KEY([FROP_COUNTRY_ID])
REFERENCES [dbo].[COUNTRIES] ([COUNTRY_ID])
GO
ALTER TABLE [dbo].[FERTILITY_RATES_ON_PERIOD] CHECK CONSTRAINT [FK_FERTILITY_RATES_ON_PERIOD]
GO
ALTER TABLE [dbo].[INDEXES_BY_COUNTRY]  WITH CHECK ADD  CONSTRAINT [FK_INDEXES_BY_COUNTRY] FOREIGN KEY([IBC_COUNTRY_ID])
REFERENCES [dbo].[COUNTRIES] ([COUNTRY_ID])
GO
ALTER TABLE [dbo].[INDEXES_BY_COUNTRY] CHECK CONSTRAINT [FK_INDEXES_BY_COUNTRY]
GO
ALTER TABLE [dbo].[MORTALITY_LIFE_EXPECTANCY_FEMALE]  WITH CHECK ADD  CONSTRAINT [FK_MORTALITY_LIFE_EXPECTANCY_FEMALE] FOREIGN KEY([MLEF_COUNTRY_ID])
REFERENCES [dbo].[COUNTRIES] ([COUNTRY_ID])
GO
ALTER TABLE [dbo].[MORTALITY_LIFE_EXPECTANCY_FEMALE] CHECK CONSTRAINT [FK_MORTALITY_LIFE_EXPECTANCY_FEMALE]
GO
ALTER TABLE [dbo].[MORTALITY_LIFE_EXPECTANCY_MALE]  WITH CHECK ADD  CONSTRAINT [FK_MORTALITY_LIFE_EXPECTANCY_MALE] FOREIGN KEY([MLEM_COUNTRY_ID])
REFERENCES [dbo].[COUNTRIES] ([COUNTRY_ID])
GO
ALTER TABLE [dbo].[MORTALITY_LIFE_EXPECTANCY_MALE] CHECK CONSTRAINT [FK_MORTALITY_LIFE_EXPECTANCY_MALE]
GO
ALTER TABLE [dbo].[POPULATION_DEMOGRAPHIC_RATES_GENERAL]  WITH CHECK ADD  CONSTRAINT [FK_POPULATION_DEMOGRAPHIC_RATES_GENERAL] FOREIGN KEY([PDRG_COUNTRY_ID])
REFERENCES [dbo].[COUNTRIES] ([COUNTRY_ID])
GO
ALTER TABLE [dbo].[POPULATION_DEMOGRAPHIC_RATES_GENERAL] CHECK CONSTRAINT [FK_POPULATION_DEMOGRAPHIC_RATES_GENERAL]
GO
ALTER TABLE [dbo].[POPULATION_FEMALE]  WITH CHECK ADD  CONSTRAINT [FK_POPULATION_FEMALE] FOREIGN KEY([PF_COUNTRY_ID])
REFERENCES [dbo].[COUNTRIES] ([COUNTRY_ID])
GO
ALTER TABLE [dbo].[POPULATION_FEMALE] CHECK CONSTRAINT [FK_POPULATION_FEMALE]
GO
ALTER TABLE [dbo].[POPULATION_FEMALE_ON_PERIOD]  WITH CHECK ADD  CONSTRAINT [FK_POPULATION_FEMALE_ON_PERIOD] FOREIGN KEY([PF_COUNTRY_ID])
REFERENCES [dbo].[COUNTRIES] ([COUNTRY_ID])
GO
ALTER TABLE [dbo].[POPULATION_FEMALE_ON_PERIOD] CHECK CONSTRAINT [FK_POPULATION_FEMALE_ON_PERIOD]
GO
ALTER TABLE [dbo].[POPULATION_MALE]  WITH CHECK ADD  CONSTRAINT [FK_POPULATION_MALE] FOREIGN KEY([PM_COUNTRY_ID])
REFERENCES [dbo].[COUNTRIES] ([COUNTRY_ID])
GO
ALTER TABLE [dbo].[POPULATION_MALE] CHECK CONSTRAINT [FK_POPULATION_MALE]
GO
ALTER TABLE [dbo].[POPULATION_MALE_ON_PERIOD]  WITH CHECK ADD  CONSTRAINT [FK_POPULATION_MALE_ON_PERIOD] FOREIGN KEY([PM_COUNTRY_ID])
REFERENCES [dbo].[COUNTRIES] ([COUNTRY_ID])
GO
ALTER TABLE [dbo].[POPULATION_MALE_ON_PERIOD] CHECK CONSTRAINT [FK_POPULATION_MALE_ON_PERIOD]
GO
ALTER TABLE [dbo].[POPULATION_MIDYAER_ON_PERIOD]  WITH CHECK ADD  CONSTRAINT [FK_POPULATION_MIDYAER_ON_PERIOD] FOREIGN KEY([PMOP_COUNTRY_ID])
REFERENCES [dbo].[COUNTRIES] ([COUNTRY_ID])
GO
ALTER TABLE [dbo].[POPULATION_MIDYAER_ON_PERIOD] CHECK CONSTRAINT [FK_POPULATION_MIDYAER_ON_PERIOD]
GO
ALTER TABLE [dbo].[POPULATION_MIDYEAR_ON_PERIOD_FEMALE]  WITH CHECK ADD  CONSTRAINT [FK_POPULATION_MIDYEAR_ON_PERIOD_FEMALE] FOREIGN KEY([PMOPF_COUNTRY_ID])
REFERENCES [dbo].[COUNTRIES] ([COUNTRY_ID])
GO
ALTER TABLE [dbo].[POPULATION_MIDYEAR_ON_PERIOD_FEMALE] CHECK CONSTRAINT [FK_POPULATION_MIDYEAR_ON_PERIOD_FEMALE]
GO
ALTER TABLE [dbo].[POPULATION_MIDYEAR_ON_PERIOD_MALE]  WITH CHECK ADD  CONSTRAINT [FK_POPULATION_MIDYEAR_ON_PERIOD_MALE] FOREIGN KEY([PMOPM_COUNTRY_ID])
REFERENCES [dbo].[COUNTRIES] ([COUNTRY_ID])
GO
ALTER TABLE [dbo].[POPULATION_MIDYEAR_ON_PERIOD_MALE] CHECK CONSTRAINT [FK_POPULATION_MIDYEAR_ON_PERIOD_MALE]
GO
/****** Object:  StoredProcedure [dbo].[DeleteData]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		g.mitsis
-- Create date: 12/03/2023
-- Description:	DELETE ALL DATA
-- EXEC dbo.DeleteData
-- =============================================
CREATE PROCEDURE [dbo].[DeleteData]
	
AS
BEGIN TRANSACTION;  
  
	BEGIN TRY 
	

	DELETE FROM FERTILITY_RATES_ON_PERIOD;
	DELETE FROM INDEXES_BY_COUNTRY;
	DELETE FROM INDEXES_BY_REGION;
	--DELETE FROM MORTALITY_LIFE_EXPECTANCY;
	DELETE FROM MORTALITY_LIFE_EXPECTANCY_FEMALE;
	DELETE FROM MORTALITY_LIFE_EXPECTANCY_MALE;
	DELETE FROM POPULATION_FEMALE;
	DELETE FROM POPULATION_MALE;
	DELETE FROM POPULATION_MIDYAER_ON_PERIOD;
	DELETE FROM POPULATION_MIDYEAR_ON_PERIOD_FEMALE;
	DELETE FROM POPULATION_MIDYEAR_ON_PERIOD_MALE;
	DELETE FROM POPULATION_DEMOGRAPHIC_RATES_GENERAL;
	DELETE FROM POPULATION_FEMALE_ON_PERIOD;
	DELETE FROM POPULATION_MALE_ON_PERIOD;
	DELETE FROM COUNTRIES;

	
	DBCC CHECKIDENT ( 'FERTILITY_RATES_ON_PERIOD'			 , RESEED, 1 )
	DBCC CHECKIDENT ( 'INDEXES_BY_COUNTRY'					 , RESEED, 1 )
	DBCC CHECKIDENT ( 'INDEXES_BY_REGION'					 , RESEED, 1 )
	--DBCC CHECKIDENT ( 'MORTALITY_LIFE_EXPECTANCY'			 , RESEED, 1 )
	DBCC CHECKIDENT ( 'MORTALITY_LIFE_EXPECTANCY_FEMALE'	 , RESEED, 1 )
	DBCC CHECKIDENT ( 'MORTALITY_LIFE_EXPECTANCY_MALE'		 , RESEED, 1 )
	DBCC CHECKIDENT ( 'POPULATION_FEMALE'					 , RESEED, 1 )
	DBCC CHECKIDENT ( 'POPULATION_MALE'						 , RESEED, 1 )
	DBCC CHECKIDENT ( 'POPULATION_MIDYAER_ON_PERIOD'		 , RESEED, 1 )
	DBCC CHECKIDENT ( 'POPULATION_MIDYEAR_ON_PERIOD_FEMALE'	 , RESEED, 1 )
	DBCC CHECKIDENT ( 'POPULATION_MIDYEAR_ON_PERIOD_MALE'	 , RESEED, 1 )
	DBCC CHECKIDENT ( 'POPULATION_DEMOGRAPHIC_RATES_GENERAL' , RESEED, 1 )
	DBCC CHECKIDENT ( 'POPULATION_FEMALE_ON_PERIOD'			 , RESEED, 1 )
	DBCC CHECKIDENT ( 'POPULATION_MALE_ON_PERIOD'			 , RESEED, 1 )
	DBCC CHECKIDENT ( 'COUNTRIES'							 , RESEED, 1 )

	END TRY  
			BEGIN CATCH  

			IF @@TRANCOUNT > 0  
				ROLLBACK TRANSACTION;  

				insert into ErrorLog
			    SELECT
					getdate()
			        ,ERROR_NUMBER() AS ErrorNumber  
			        ,ERROR_SEVERITY() AS ErrorSeverity  
			        ,ERROR_STATE() AS ErrorState  
			        ,'DBO.DeleteData' AS ErrorProcedure  
			        ,ERROR_LINE() AS ErrorLine  
			        ,ERROR_MESSAGE() AS ErrorMessage
					,null as [StackTrace];   
			  
			END CATCH;  
			  
			IF @@TRANCOUNT > 0  
			    COMMIT TRANSACTION; 

GO
/****** Object:  StoredProcedure [etl].[CreatePrimaryUniqueForeignKeys]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		g.mitsis
-- Create date: 12/03/2022
-- Description:	Create Primary Unique Foreign Keys
-- =============================================
CREATE PROCEDURE [etl].[CreatePrimaryUniqueForeignKeys]
	
AS
BEGIN
	--SELECT 'ALTER TABLE '+TABLE_NAME+' ADD CONSTRAINT PK_'+TABLE_NAME+' PRIMARY KEY ('+COLUMN_NAME+');' FROM INFORMATION_SCHEMA.COLUMNS C WHERE COLUMN_NAME LIKE '%_ID' AND COLUMN_NAME NOT LIKE '%_COUNTRY_ID'
	
	ALTER TABLE COUNTRIES ADD CONSTRAINT PK_COUNTRIES PRIMARY KEY (COUNTRY_ID);
	ALTER TABLE FERTILITY_RATES_ON_PERIOD ADD CONSTRAINT PK_FERTILITY_RATES_ON_PERIOD PRIMARY KEY (FROP_ID);
	ALTER TABLE INDEXES_BY_COUNTRY ADD CONSTRAINT PK_INDEXES_BY_COUNTRY PRIMARY KEY (IBC_ID);
	ALTER TABLE INDEXES_BY_REGION ADD CONSTRAINT PK_INDEXES_BY_REGION PRIMARY KEY (IBR_ID);
	ALTER TABLE MORTALITY_LIFE_EXPECTANCY ADD CONSTRAINT PK_MORTALITY_LIFE_EXPECTANCY PRIMARY KEY (MLE_ID);
	ALTER TABLE MORTALITY_LIFE_EXPECTANCY_FEMALE ADD CONSTRAINT PK_MORTALITY_LIFE_EXPECTANCY_FEMALE PRIMARY KEY (MLEF_ID);
	ALTER TABLE MORTALITY_LIFE_EXPECTANCY_MALE ADD CONSTRAINT PK_MORTALITY_LIFE_EXPECTANCY_MALE PRIMARY KEY (MLEM_ID);
	ALTER TABLE POPULATION_DEMOGRAPHIC_RATES_GENERAL ADD CONSTRAINT PK_POPULATION_DEMOGRAPHIC_RATES_GENERAL PRIMARY KEY (PDRG_ID);
	ALTER TABLE POPULATION_FEMALE ADD CONSTRAINT PK_POPULATION_FEMALE PRIMARY KEY (PF_ID);
	ALTER TABLE POPULATION_MALE ADD CONSTRAINT PK_POPULATION_MALE PRIMARY KEY (PM_ID);
	ALTER TABLE POPULATION_MIDYAER_ON_PERIOD ADD CONSTRAINT PK_POPULATION_MIDYAER_ON_PERIOD PRIMARY KEY (PMOP_ID);
	ALTER TABLE POPULATION_MIDYEAR_ON_PERIOD_FEMALE ADD CONSTRAINT PK_POPULATION_MIDYEAR_ON_PERIOD_FEMALE PRIMARY KEY (PMOPF_ID);
	ALTER TABLE POPULATION_MIDYEAR_ON_PERIOD_MALE ADD CONSTRAINT PK_POPULATION_MIDYEAR_ON_PERIOD_MALE PRIMARY KEY (PMOPM_ID);
	ALTER TABLE [POPULATION_FEMALE_ON_PERIOD] ADD CONSTRAINT PK_POPULATION_FEMALE_ON_PERIOD PRIMARY KEY (PF_ID);
	ALTER TABLE [POPULATION_MALE_ON_PERIOD] ADD CONSTRAINT PK_POPULATION_MALE_ON_PERIOD PRIMARY KEY (PF_ID);
	
	--SELECT 
	--	'ALTER TABLE '+TABLE_NAME
	--	+' ADD CONSTRAINT FK_'+TABLE_NAME+' FOREIGN KEY ('+COLUMN_NAME+') REFERENCES COUNTRIES(COUNTRY_ID);' FROM INFORMATION_SCHEMA.COLUMNS C WHERE COLUMN_NAME LIKE '%_ID' AND COLUMN_NAME LIKE '%_COUNTRY_ID'
	
	ALTER TABLE FERTILITY_RATES_ON_PERIOD ADD CONSTRAINT FK_FERTILITY_RATES_ON_PERIOD FOREIGN KEY (FROP_COUNTRY_ID) REFERENCES COUNTRIES(COUNTRY_ID);
	ALTER TABLE INDEXES_BY_COUNTRY ADD CONSTRAINT FK_INDEXES_BY_COUNTRY FOREIGN KEY (IBC_COUNTRY_ID) REFERENCES COUNTRIES(COUNTRY_ID);
	ALTER TABLE MORTALITY_LIFE_EXPECTANCY ADD CONSTRAINT FK_MORTALITY_LIFE_EXPECTANCY FOREIGN KEY (MLE_COUNTRY_ID) REFERENCES COUNTRIES(COUNTRY_ID);
	ALTER TABLE MORTALITY_LIFE_EXPECTANCY_FEMALE ADD CONSTRAINT FK_MORTALITY_LIFE_EXPECTANCY_FEMALE FOREIGN KEY (MLEF_COUNTRY_ID) REFERENCES COUNTRIES(COUNTRY_ID);
	ALTER TABLE MORTALITY_LIFE_EXPECTANCY_MALE ADD CONSTRAINT FK_MORTALITY_LIFE_EXPECTANCY_MALE FOREIGN KEY (MLEM_COUNTRY_ID) REFERENCES COUNTRIES(COUNTRY_ID);
	ALTER TABLE POPULATION_DEMOGRAPHIC_RATES_GENERAL ADD CONSTRAINT FK_POPULATION_DEMOGRAPHIC_RATES_GENERAL FOREIGN KEY (PDRG_COUNTRY_ID) REFERENCES COUNTRIES(COUNTRY_ID);
	ALTER TABLE POPULATION_FEMALE ADD CONSTRAINT FK_POPULATION_FEMALE FOREIGN KEY (PF_COUNTRY_ID) REFERENCES COUNTRIES(COUNTRY_ID);
	ALTER TABLE POPULATION_MALE ADD CONSTRAINT FK_POPULATION_MALE FOREIGN KEY (PM_COUNTRY_ID) REFERENCES COUNTRIES(COUNTRY_ID);
	ALTER TABLE POPULATION_MIDYAER_ON_PERIOD ADD CONSTRAINT FK_POPULATION_MIDYAER_ON_PERIOD FOREIGN KEY (PMOP_COUNTRY_ID) REFERENCES COUNTRIES(COUNTRY_ID);
	ALTER TABLE POPULATION_MIDYEAR_ON_PERIOD_FEMALE ADD CONSTRAINT FK_POPULATION_MIDYEAR_ON_PERIOD_FEMALE FOREIGN KEY (PMOPF_COUNTRY_ID) REFERENCES COUNTRIES(COUNTRY_ID);
	ALTER TABLE POPULATION_MIDYEAR_ON_PERIOD_MALE ADD CONSTRAINT FK_POPULATION_MIDYEAR_ON_PERIOD_MALE FOREIGN KEY (PMOPM_COUNTRY_ID) REFERENCES COUNTRIES(COUNTRY_ID);
	
	ALTER TABLE POPULATION_MIDYEAR_ON_PERIOD_MALE ADD CONSTRAINT UC_POPULATION_MIDYEAR_ON_PERIOD_MALE UNIQUE (PMOPM_COUNTRY_ID,[PMOPM_YEAR],PMOPM_STARTING_AGE,PMOPM_ENDING_AGE);
	ALTER TABLE POPULATION_MIDYEAR_ON_PERIOD_FEMALE ADD CONSTRAINT UC_POPULATION_MIDYEAR_ON_PERIOD_FEMALE UNIQUE (PMOPF_COUNTRY_ID,[PMOPF_YEAR],PMOPF_STARTING_AGE,PMOPF_ENDING_AGE);
	ALTER TABLE POPULATION_MIDYAER_ON_PERIOD ADD CONSTRAINT UC_POPULATION_MIDYAER_ON_PERIOD UNIQUE (PMOP_COUNTRY_ID,[PMOP_YEAR],PMOP_STARTING_AGE,PMOP_ENDING_AGE);
	
	ALTER TABLE POPULATION_MALE ADD CONSTRAINT UC_FERTILITY_RATES_ON_PERIOD UNIQUE (PM_COUNTRY_ID,[PM_YEAR],PM_AGE_FLAG);
	ALTER TABLE POPULATION_FEMALE ADD CONSTRAINT UC_POPULATION_FEMALE UNIQUE (PF_COUNTRY_ID,[PF_YEAR],PF_AGE_FLAG);
	ALTER TABLE FERTILITY_RATES_ON_PERIOD ADD CONSTRAINT UC_FERTILITY_RATES_ON_PERIOD UNIQUE (FROP_COUNTRY_ID,[FROP_YEAR],FROP_STARTING_AGE,FROP_ENDING_AGE);	
	
	ALTER TABLE POPULATION_MIDYEAR_ON_PERIOD_MALE ADD CONSTRAINT UC_POPULATION_MIDYEAR_ON_PERIOD_MALE UNIQUE (PMOPM_COUNTRY_ID,[PMOPM_YEAR],PMOPM_STARTING_AGE,PMOPM_ENDING_AGE);
	ALTER TABLE POPULATION_MIDYEAR_ON_PERIOD_FEMALE ADD CONSTRAINT UC_POPULATION_MIDYEAR_ON_PERIOD_FEMALE UNIQUE (PMOPF_COUNTRY_ID,[PMOPF_YEAR],PMOPF_STARTING_AGE,PMOPF_ENDING_AGE);
	ALTER TABLE POPULATION_MIDYAER_ON_PERIOD ADD CONSTRAINT UC_POPULATION_MIDYAER_ON_PERIOD UNIQUE (PMOP_COUNTRY_ID,[PMOP_YEAR],PMOP_STARTING_AGE,PMOP_ENDING_AGE);
	
	ALTER TABLE POPULATION_MALE ADD CONSTRAINT UC_FERTILITY_RATES_ON_PERIOD UNIQUE (PM_COUNTRY_ID,[PM_YEAR],PM_AGE_FLAG);
	ALTER TABLE POPULATION_FEMALE ADD CONSTRAINT UC_POPULATION_FEMALE UNIQUE (PF_COUNTRY_ID,[PF_YEAR],PF_AGE_FLAG);
	ALTER TABLE FERTILITY_RATES_ON_PERIOD ADD CONSTRAINT UC_FERTILITY_RATES_ON_PERIOD UNIQUE (FROP_COUNTRY_ID,[FROP_YEAR],FROP_STARTING_AGE,FROP_ENDING_AGE);
	
	ALTER TABLE INDEXES_BY_COUNTRY ADD CONSTRAINT UC_INDEXES_BY_COUNTRY UNIQUE (IBC_COUNTRY_ID,[IBC_YEAR]);
	ALTER TABLE INDEXES_BY_REGION ADD CONSTRAINT UC_INDEXES_BY_REGION UNIQUE (IBR_REGION,[IBR_YEAR]);

	ALTER TABLE [dbo].[MORTALITY_LIFE_EXPECTANCY] ADD CONSTRAINT UC_MORTALITY_LIFE_EXPECTANCY UNIQUE (MLE_COUNTRY_ID,[MLE_YEAR]);
	ALTER TABLE [dbo].[MORTALITY_LIFE_EXPECTANCY_FEMALE] ADD CONSTRAINT UC_MORTALITY_LIFE_EXPECTANCY_FEMALE UNIQUE (MLEF_COUNTRY_ID,[MLEF_YEAR]);
	ALTER TABLE [dbo].[MORTALITY_LIFE_EXPECTANCY_MALE] ADD CONSTRAINT UC_MORTALITY_LIFE_EXPECTANCY_MALE UNIQUE (MLEM_COUNTRY_ID,[MLEM_YEAR]);

	ALTER TABLE [dbo].[POPULATION_FEMALE_ON_PERIOD]  WITH CHECK ADD  CONSTRAINT [FK_POPULATION_FEMALE_ON_PERIOD] FOREIGN KEY([PF_COUNTRY_ID])REFERENCES [dbo].[COUNTRIES] ([COUNTRY_ID]);
	ALTER TABLE [dbo].[POPULATION_MALE_ON_PERIOD]  WITH CHECK ADD  CONSTRAINT [FK_POPULATION_MALE_ON_PERIOD] FOREIGN KEY([PM_COUNTRY_ID])REFERENCES [dbo].[COUNTRIES] ([COUNTRY_ID]);
	ALTER TABLE [dbo].[POPULATION_FEMALE_ON_PERIOD] ADD CONSTRAINT UC_POPULATION_FEMALE_ON_PERIOD UNIQUE ([PF_COUNTRY_ID],[PF_YEAR],[PF_STARTING_AGE],[PF_ENDING_AGE]);
	ALTER TABLE [dbo].[POPULATION_MALE_ON_PERIOD] ADD CONSTRAINT UC_POPULATION_MALE_ON_PERIOD UNIQUE ([PM_COUNTRY_ID],[PM_YEAR],[PM_STARTING_AGE],[PM_ENDING_AGE]);


END
GO
/****** Object:  StoredProcedure [etl].[CreateTables]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		G.MITSIS
-- Create date: 12/03/2023
-- Description:	create tables
-- =============================================
CREATE PROCEDURE [etl].[CreateTables]
	
AS
BEGIN
	
	IF OBJECT_ID('COUNTRIES'							) IS NULL 
		BEGIN 
			CREATE TABLE [DWH].[dbo].[COUNTRIES](
				[COUNTRY_ID] [int] IDENTITY(1,1) NOT NULL,
				[C_ISO] [varchar](2) NULL,
				[C_ISO3] [varchar](3) NULL,
				[C_ISO_CODE] [smallint] NULL,
				[C_FIPS] [varchar](2) NULL,
				[C_DISPLAY_NAME] [varchar](50) NULL,
				[C_OFFICIAL_NAME] [varchar](100) NULL,
				[C_CAPITAL] [varchar](50) NULL,
				[C_CONTINENT] [varchar](50) NULL,
				[C_CURRENCYCODE] [varchar](50) NULL,
				[C_CURRENCYNAME] [varchar](50) NULL,
				[C_PHONE] [varchar](50) NULL,
				[C_REGION_CODE] [tinyint] NULL,
				[C_REGION_NAME] [varchar](50) NULL,
				[C_SUB_REGION_CODE] [smallint] NULL,
				[C_SUB_REGION_NAME] [varchar](50) NULL,
				[C_INTERMEDIATE_REGION_CODE] [smallint] NULL,
				[C_INTERMEDIATE_REGION_NAME] [varchar](50) NULL,
				[C_STATUS] [varchar](50) NULL,
				[C_DEVELOPED_OR_DEVELOPING] [varchar](50) NULL,
				[C_SMALL_ISLAND_DEVELOPING_STATES_SIDS] [bit] NULL,
				[C_LAND_LOCKED_DEVELOPING_COUNTRIES_LLDC] [bit] NULL,
				[C_LEAST_DEVELOPED_COUNTRIES_LDC] [bit] NULL,
				[C_AREA_SQKM] [decimal](18, 4) NULL,
				[C_POPULATION] [int] NULL
			) ON [PRIMARY]
		end

	
	IF OBJECT_ID('ErrorLog'								) IS NULL 
		BEGIN 
			CREATE TABLE [DWH].[dbo].[ErrorLog](
				[ID] [int] IDENTITY(1,1) NOT NULL,
				[ReferenceDate] [datetime2](7) NULL,
				[ErrorNumber] [int] NULL,
				[ErrorSeverity] [int] NULL,
				[ErrorState] [int] NULL,
				[ErrorProcedure] [varchar](200) NULL,
				[ErrorLine] [int] NULL,
				[ErrorMessage] [varchar](500) NULL
			) ON [PRIMARY]
		END
	
	IF OBJECT_ID('FERTILITY_RATES_ON_PERIOD'			) IS NULL 
		BEGIN 
			CREATE TABLE [DWH].[dbo].[FERTILITY_RATES_ON_PERIOD](
				[FROP_ID] [int] IDENTITY(1,1) NOT NULL,
				[FROP_COUNTRY_ID] [int] NOT NULL,
				[FROP_YEAR] [int] NOT NULL,
				[FROP_TOTAL_FLAG] [varchar](1) NULL,
				[FROP_STARTING_AGE] [int] NULL,
				[FROP_AGE_GROUP_INDICATOR] [varchar](1) NULL,
				[FROP_ENDING_AGE] [int] NULL,
				[FROP_FERTILITY_RATE] [decimal](18, 4) NULL
			) ON [PRIMARY]
		END
	
	IF OBJECT_ID('INDEXES_BY_COUNTRY'					) IS NULL 
		BEGIN 
			CREATE TABLE [DWH].[dbo].[INDEXES_BY_COUNTRY](
				[IBC_ID] [int] IDENTITY(1,1) NOT NULL,
				[IBC_COUNTRY_ID] [int] NOT NULL,
				[IBC_YEAR] [int] NOT NULL,
				[IBC_GDP_PER_CAPITA] [decimal](18, 4) NULL,
				[IBC_DOMESTIC_CREDITS] [decimal](18, 4) NULL,
				[IBC_INCOME_INDEX] [decimal](18, 4) NULL,
				[IBC_ESTIMATED_GNI_FEMALE] [decimal](18, 4) NULL,
				[IBC_ESTIMATED_GNI_MALE] [decimal](18, 4) NULL,
				[IBC_GDP_TOTAL] [decimal](18, 4) NULL,
				[IBC_GNI_PERCAPITA] [decimal](18, 4) NULL,
				[IBC_GROSS_FIXED_CAPITAL_FORMATION] [decimal](18, 4) NULL,
				[IBC_LABOUR_SHARE_OF_GDP] [decimal](18, 4) NULL
			) ON [PRIMARY]
		END
	
	IF OBJECT_ID('INDEXES_BY_REGION'					) IS NULL 
		BEGIN 
			CREATE TABLE [DWH].[dbo].[INDEXES_BY_REGION](
				[IBR_ID] [int] IDENTITY(1,1) NOT NULL,
				[IBR_REGION] [varchar](256) NULL,
				[IBR_YEAR] [int] NOT NULL,
				[IBR_GDP_PER_CAPITA] [decimal](18, 4) NULL,
				[IBR_DOMESTIC_CREDITS] [decimal](18, 4) NULL,
				[IBR_INCOME_INDEX] [decimal](18, 4) NULL,
				[IBR_ESTIMATED_GNI_FEMALE] [decimal](18, 4) NULL,
				[IBR_ESTIMATED_GNI_MALE] [decimal](18, 4) NULL,
				[IBR_GDP_TOTAL] [decimal](18, 4) NULL,
				[IBR_GNI_PERCAPITA] [decimal](18, 4) NULL,
				[IBR_GROSS_FIXED_CAPITAL_FORMATION] [decimal](18, 4) NULL,
				[IBR_LABOUR_SHARE_OF_GDP] [decimal](18, 4) NULL
			) ON [PRIMARY]
		END
	
	IF OBJECT_ID('MORTALITY_LIFE_EXPECTANCY'			) IS NULL 
		BEGIN
			CREATE TABLE [DWH].[dbo].[MORTALITY_LIFE_EXPECTANCY](
				[MLE_ID] [int] IDENTITY(1,1) NOT NULL,
				[MLE_COUNTRY_ID] [int] NOT NULL,
				[MLE_YEAR] [int] NOT NULL,
				[MLE_INFANT_MORTALITY] [decimal](18, 4) NULL,
				[MLE_LIFE_EXPECTANCY] [decimal](18, 4) NULL,
				[MLE_MORTALITY_RATE_1TO4] [decimal](18, 4) NULL,
				[MLE_MORTALITY_RATE_UNDER5] [decimal](18, 4) NULL
			) ON [PRIMARY]
		END
	
	IF OBJECT_ID('MORTALITY_LIFE_EXPECTANCY_FEMALE'			) IS NULL 
		BEGIN
			CREATE TABLE [DWH].[dbo].[MORTALITY_LIFE_EXPECTANCY_FEMALE](
				[MLEF_ID] [int] IDENTITY(1,1) NOT NULL,
				[MLEF_COUNTRY_ID] [int] NOT NULL,
				[MLEF_YEAR] [int] NOT NULL,
				[MLEF_INFANT_MORTALITY_FEMALE] [decimal](18, 4) NULL,
				[MLEF_LIFE_EXPECTANCY_FEMALE] [decimal](18, 4) NULL,
				[MLEF_MORTALITY_RATE_1TO4_FEMALE] [decimal](18, 4) NULL,
				[MLEF_MORTALITY_RATE_UNDER5_FEMALE] [decimal](18, 4) NULL
			) ON [PRIMARY]
		END
	
	IF OBJECT_ID('MORTALITY_LIFE_EXPECTANCY_MALE'			) IS NULL 
		BEGIN
			CREATE TABLE [DWH].[dbo].[MORTALITY_LIFE_EXPECTANCY_MALE](
				[MLEM_ID] [int] IDENTITY(1,1) NOT NULL,
				[MLEM_COUNTRY_ID] [int] NOT NULL,
				[MLEM_YEAR] [int] NOT NULL,
				[MLEM_INFANT_MORTALITY_MALE] [decimal](18, 4) NULL,
				[MLEM_LIFE_EXPECTANCY_MALE] [decimal](18, 4) NULL,
				[MLEM_MORTALITY_RATE_1TO4_MALE] [decimal](18, 4) NULL,
				[MLEM_MORTALITY_RATE_UNDER5_MALE] [decimal](18, 4) NULL
			) ON [PRIMARY]
		END
	
	
	IF OBJECT_ID('POPULATION_DEMOGRAPHIC_RATES_GENERAL'			) IS NULL 
		BEGIN
			CREATE TABLE [DWH].[dbo].[POPULATION_DEMOGRAPHIC_RATES_GENERAL](
				[PDRG_ID] [int] IDENTITY(1,1) NOT NULL,
				[PDRG_COUNTRY_ID] [INT] NULL,
				[PDRG_YEAR] [INT] NOT NULL,
				[PDRG_INFANT_MORTALITY] [DECIMAL](18, 4) NULL,
				[PDRG_LIFE_EXPECTANCY] [DECIMAL](18, 4) NULL,
				[PDRG_MORTALITY_RATE_1TO4] [DECIMAL](18, 4) NULL,
				[PDRG_MORTALITY_RATE_UNDER5] [DECIMAL](18, 4) NULL,
				[PDRG_GROSS_REPRODUCTION_RATE] [DECIMAL](18, 4) NULL,
				[PDRG_SEX_RATIO_AT_BIRTH] [DECIMAL](18, 4) NULL,
				[PDRG_CRUDE_BIRTH_RATE] [DECIMAL](18, 4) NULL,
				[PDRG_CRUDE_DEATH_RATE] [DECIMAL](18, 4) NULL,
				[PDRG_GROWTH_RATE] [DECIMAL](18, 4) NULL,
				[PDRG_NET_MIGRATION] [DECIMAL](18, 4) NULL,
				[PDRG_RATE_NATURAL_INCREASE] [DECIMAL](18, 4) NULL
			) ON [PRIMARY]
		END
	
	
	IF OBJECT_ID('POPULATION_FEMALE'			) IS NULL 
		BEGIN
			CREATE TABLE [DWH].[dbo].[POPULATION_FEMALE](
				[PF_ID] [int] IDENTITY(1,1) NOT NULL,
				[PF_COUNTRY_ID] [int] NOT NULL,
				[PF_YEAR] [int] NOT NULL,
				[PF_MAX_AGE] [int] NULL,
				[PF_AGE_FLAG] [int] NULL,
				[PF_POPULATION_FEMALE] [decimal](18, 4) NULL
			) ON [PRIMARY]
		END
	
	IF OBJECT_ID('POPULATION_MALE'			) IS NULL 
		BEGIN
			CREATE TABLE [DWH].[dbo].[POPULATION_MALE](
				[PM_ID] [int] IDENTITY(1,1) NOT NULL,
				[PM_COUNTRY_ID] [int] NOT NULL,
				[PM_YEAR] [int] NOT NULL,
				[PM_MAX_AGE] [int] NULL,
				[PM_AGE_FLAG] [int] NULL,
				[PM_POPULATION_MALE] [decimal](18, 4) NULL
			) ON [PRIMARY]
		END
	
	
	IF OBJECT_ID('POPULATION_MIDYAER_ON_PERIOD'			) IS NULL 
		BEGIN
			CREATE TABLE [DWH].[dbo].[POPULATION_MIDYAER_ON_PERIOD](
				[PMOP_ID] [int] IDENTITY(1,1) NOT NULL,
				[PMOP_COUNTRY_ID] [int] NOT NULL,
				[PMOP_YEAR] [int] NOT NULL,
				[PMOP_TOTAL_FLAG] [varchar](1) NULL,
				[PMOP_STARTING_AGE] [int] NULL,
				[PMOP_AGE_GROUP_INDICATOR] [varchar](1) NULL,
				[PMOP_ENDING_AGE] [int] NULL,
				[PMOP_MIDYEAR_POPULATION] [decimal](18, 4) NULL
			) ON [PRIMARY]
		END
	
	
	IF OBJECT_ID('POPULATION_MIDYEAR_ON_PERIOD_FEMALE'			) IS NULL 
		BEGIN
			CREATE TABLE [DWH].[dbo].[POPULATION_MIDYEAR_ON_PERIOD_FEMALE](
				[PMOPF_ID] [int] IDENTITY(1,1) NOT NULL,
				[PMOPF_COUNTRY_ID] [int] NOT NULL,
				[PMOPF_YEAR] [int] NOT NULL,
				[PMOPF_TOTAL_FLAG] [varchar](1) NULL,
				[PMOPF_STARTING_AGE] [int] NULL,
				[PMOPF_AGE_GROUP_INDICATOR] [varchar](1) NULL,
				[PMOPF_ENDING_AGE] [int] NULL,
				[PMOPF_MIDYEAR_POPULATION_FEMALE] [decimal](18, 4) NULL
			) ON [PRIMARY]
		END
	
	
	IF OBJECT_ID('POPULATION_MIDYEAR_ON_PERIOD_MALE'			) IS NULL 
		BEGIN
			CREATE TABLE [DWH].[dbo].[POPULATION_MIDYEAR_ON_PERIOD_MALE](
				[PMOPM_ID] [int] IDENTITY(1,1) NOT NULL,
				[PMOPM_COUNTRY_ID] [int] NOT NULL,
				[PMOPM_YEAR] [int] NOT NULL,
				[PMOPM_TOTAL_FLAG] [varchar](1) NULL,
				[PMOPM_STARTING_AGE] [int] NULL,
				[PMOPM_AGE_GROUP_INDICATOR] [varchar](1) NULL,
				[PMOPM_ENDING_AGE] [int] NULL,
				[PMOPM_MIDYEAR_POPULATION_MALE] [decimal](18, 4) NULL
			) ON [PRIMARY]
		END

	IF OBJECT_ID('POPULATION_MALE_ON_PERIOD'			) IS NULL 
		BEGIN
			CREATE TABLE [dbo].[POPULATION_MALE_ON_PERIOD](
				[PM_ID] [int] IDENTITY(1,1) NOT NULL,
				[PM_COUNTRY_ID] [int] NOT NULL,
				[PM_YEAR] [int] NULL,
				[PM_TOTAL_FLAG] [varchar](1) NOT NULL,
				[PM_STARTING_AGE] [int] NULL,
				[PM_AGE_GROUP_INDICATOR] [varchar](1) NOT NULL,
				[PM_ENDING_AGE] [int] NULL,
				[PM_POPULATION_FEMALE] [decimal](38, 4) NULL
			) ON [PRIMARY]
		END

	IF OBJECT_ID('POPULATION_FEMALE_ON_PERIOD'			) IS NULL 
		BEGIN
			CREATE TABLE [dbo].[POPULATION_FEMALE_ON_PERIOD](
				[PF_ID] [int] IDENTITY(1,1) NOT NULL,
				[PF_COUNTRY_ID] [int] NOT NULL,
				[PF_YEAR] [int] NULL,
				[PF_TOTAL_FLAG] [varchar](1) NOT NULL,
				[PF_STARTING_AGE] [int] NULL,
				[PF_AGE_GROUP_INDICATOR] [varchar](1) NOT NULL,
				[PF_ENDING_AGE] [int] NULL,
				[PF_POPULATION_FEMALE] [decimal](38, 4) NULL
			) ON [PRIMARY]
		END

END
GO
/****** Object:  StoredProcedure [etl].[importAMain]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		g.mitsis
-- Create date: 12/03/2023
-- Description:	IMPORT MAIN?
-- =============================================
CREATE procedure [etl].[importAMain]
	@WITH_CREATE_TABLES BIT = 0
	
AS
BEGIN TRANSACTION;  
  
	BEGIN TRY 
			
	
	--SELECT * FROM SYS.sql_modules a
	--INNER JOIN SYS.objects b on a.object_id = b.object_id
	
	IF(@WITH_CREATE_TABLES = 1)
	BEGIN 
		EXEC ETL.CreateTables;
		EXEC ETL.CreatePrimaryUniqueForeignKeys
	END
	
	EXEC etl.importCountries;
	EXEC etl.importFertilityRatesPerPeriod;
	exec etl.importIndexesByCountry;
	exec etl.importIndexesByRegion;
	--exec etl.ImportMortalityLifeExpectancy;
	exec etl.ImportMortalityLifeExpectancyFemale;
	exec etl.ImportMortalityLifeExpectancyMale;
	exec etl.ImportPopulationDemographicRatesGeneral;
	exec etl.ImportPopulationFemale;
	exec etl.ImportPopulationMale;
	exec etl.ImportPopulationMidyearOnPeriod;
	exec etl.ImportPopulationMidyearOnPeriodFemale;
	exec etl.ImportPopulationMidyearOnPeriodMale;
	exec etl.ImportPopulationFemaleOnPeriod;
	exec etl.ImportPopulationMaleOnPeriod;
    
	END TRY  
			BEGIN CATCH  

			IF @@TRANCOUNT > 0  
				ROLLBACK TRANSACTION;  

				insert into ErrorLog
			    SELECT
					getdate()
			        ,ERROR_NUMBER() AS ErrorNumber  
			        ,ERROR_SEVERITY() AS ErrorSeverity  
			        ,ERROR_STATE() AS ErrorState  
			        ,'[etl].[importAMain]' AS ErrorProcedure  
			        ,ERROR_LINE() AS ErrorLine  
			        ,ERROR_MESSAGE() AS ErrorMessage
					,null as [StackTrace];    
			  
			END CATCH;  
			  
			IF @@TRANCOUNT > 0  
			    COMMIT TRANSACTION;  
GO
/****** Object:  StoredProcedure [etl].[importCountries]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		g.mitsis
-- Create date: 2023-02-18
-- Description:	import Countries
-- =============================================
CREATE PROCEDURE [etl].[importCountries]
	
AS
BEGIN TRANSACTION;  
  
	BEGIN TRY 
	
		
	SET IDENTITY_INSERT [dbo].[COUNTRIES] ON;
	INSERT INTO [dbo].[COUNTRIES]
           ([COUNTRY_ID]
			,[C_ISO]
           ,[C_ISO3]
           ,[C_ISO_CODE]
           ,[C_FIPS]
           ,[C_DISPLAY_NAME]
           ,[C_OFFICIAL_NAME]
           ,[C_CAPITAL]
           ,[C_CONTINENT]
           ,[C_CURRENCYCODE]
           ,[C_CURRENCYNAME]
           ,[C_PHONE]
           ,[C_REGION_CODE]
           ,[C_REGION_NAME]
           ,[C_SUB_REGION_CODE]
           ,[C_SUB_REGION_NAME]
           ,[C_INTERMEDIATE_REGION_CODE]
           ,[C_INTERMEDIATE_REGION_NAME]
           ,[C_STATUS]
           ,[C_DEVELOPED_OR_DEVELOPING]
           ,[C_SMALL_ISLAND_DEVELOPING_STATES_SIDS]
           ,[C_LAND_LOCKED_DEVELOPING_COUNTRIES_LLDC]
           ,[C_LEAST_DEVELOPED_COUNTRIES_LDC]
           ,[C_AREA_SQKM]
           ,[C_POPULATION])
     SELECT [COUNTRY_ID]
      ,[ISO]
      ,[ISO3]
      ,[ISO_CODE]
      ,[FIPS]
      ,[DISPLAY_NAME]
      ,[OFFICIAL_NAME]
      ,[CAPITAL]
      ,[CONTINENT]
      ,[CURRENCYCODE]
      ,[CURRENCYNAME]
      ,[PHONE]
      ,[REGION_CODE]
      ,[REGION_NAME]
      ,[SUB_REGION_CODE]
      ,[SUB_REGION_NAME]
      ,[INTERMEDIATE_REGION_CODE]
      ,[INTERMEDIATE_REGION_NAME]
      ,[STATUS]
      ,[DEVELOPED_OR_DEVELOPING]
      ,[SMALL_ISLAND_DEVELOPING_STATES_SIDS]
      ,[LAND_LOCKED_DEVELOPING_COUNTRIES_LLDC]
      ,[LEAST_DEVELOPED_COUNTRIES_LDC]
      ,[AREA_SQKM]
      ,[POPULATION]
	FROM [DWH_INTERMIDIATE].[dbo].[COUNTRIES]
	SET IDENTITY_INSERT [dbo].[COUNTRIES] OFF;
    
	END TRY  
			BEGIN CATCH  

			IF @@TRANCOUNT > 0  
				ROLLBACK TRANSACTION;  

				insert into ErrorLog
			    SELECT
					getdate()
			        ,ERROR_NUMBER() AS ErrorNumber  
			        ,ERROR_SEVERITY() AS ErrorSeverity  
			        ,ERROR_STATE() AS ErrorState  
			        ,'[etl].[importCountries]' AS ErrorProcedure  
			        ,ERROR_LINE() AS ErrorLine  
			        ,ERROR_MESSAGE() AS ErrorMessage
					,null as [StackTrace];  
			  
			END CATCH;  
			  
			IF @@TRANCOUNT > 0  
			    COMMIT TRANSACTION; ; 
GO
/****** Object:  StoredProcedure [etl].[importFertilityRatesPerPeriod]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		g.mitsis
-- Create date: 12/03/2023
-- Description:	import Countries
-- =============================================
CREATE PROCEDURE [etl].[importFertilityRatesPerPeriod]
	
AS
BEGIN TRANSACTION;  
  
	BEGIN TRY 
			
	
	INSERT INTO [dbo].[FERTILITY_RATES_ON_PERIOD]
           ([FROP_COUNTRY_ID]
			,[FROP_YEAR]
			,[FROP_TOTAL_FLAG]
			,[FROP_STARTING_AGE]
			,[FROP_AGE_GROUP_INDICATOR]
			,[FROP_ENDING_AGE]
			,[FROP_FERTILITY_RATE])
     SELECT  [COUNTRY_ID]
			,[YEAR]
			,[TOTAL_FLAG]
			,[STARTING_AGE]
			,[AGE_GROUP_INDICATOR]
			,[ENDING_AGE]
			,[FERTILITY_RATE]
	FROM [DWH_INTERMIDIATE].dbo.FERTILITY_RATES_ON_PERIOD
    
	END TRY  
			BEGIN CATCH  

			IF @@TRANCOUNT > 0  
				ROLLBACK TRANSACTION;  

				insert into ErrorLog
			    SELECT
					getdate()
			        ,ERROR_NUMBER() AS ErrorNumber  
			        ,ERROR_SEVERITY() AS ErrorSeverity  
			        ,ERROR_STATE() AS ErrorState  
			        ,'[etl].[importFertilityRatesPerPeriod]' AS ErrorProcedure  
			        ,ERROR_LINE() AS ErrorLine  
			        ,ERROR_MESSAGE() AS ErrorMessage
					,null as [StackTrace];    
			  
			END CATCH;  
			  
			IF @@TRANCOUNT > 0  
			    COMMIT TRANSACTION; 
GO
/****** Object:  StoredProcedure [etl].[importIndexesByCountry]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		g.mitsis
-- Create date: 12/03/2023
-- Description:	import Countries
-- =============================================
CREATE PROCEDURE [etl].[importIndexesByCountry]
	
AS
BEGIN TRANSACTION;  
  
	BEGIN TRY 
			
	
	INSERT INTO [dbo].[INDEXES_BY_COUNTRY]
           ([IBC_COUNTRY_ID]
			,[IBC_YEAR]
			,[IBC_GDP_PER_CAPITA]
			,[IBC_DOMESTIC_CREDITS]
			,[IBC_INCOME_INDEX]
			,[IBC_ESTIMATED_GNI_FEMALE]
			,[IBC_ESTIMATED_GNI_MALE]
			,[IBC_GDP_TOTAL]
			,[IBC_GNI_PERCAPITA]
			,[IBC_GROSS_FIXED_CAPITAL_FORMATION]
			,[IBC_LABOUR_SHARE_OF_GDP])
     SELECT  [COUNTRY_ID]
			,[YEAR]
			,[GDP_PER_CAPITA]
			,[DOMESTIC_CREDITS]
			,[INCOME_INDEX]
			,[ESTIMATED_GNI_FEMALE]
			,[ESTIMATED_GNI_MALE]
			,[GDP_TOTAL]
			,[GNI_PERCAPITA]
			,[GROSS_FIXED_CAPITAL_FORMATION]
			,[LABOUR_SHARE_OF_GDP]
	FROM [DWH_INTERMIDIATE].[dbo].[INDEXES_BY_COUNTRY]
	
    
	END TRY  
			BEGIN CATCH  

			IF @@TRANCOUNT > 0  
				ROLLBACK TRANSACTION;  

				insert into ErrorLog
			    SELECT
					getdate()
			        ,ERROR_NUMBER() AS ErrorNumber  
			        ,ERROR_SEVERITY() AS ErrorSeverity  
			        ,ERROR_STATE() AS ErrorState  
			        ,'[etl].[importIndexesByCountry]' AS ErrorProcedure  
			        ,ERROR_LINE() AS ErrorLine  
			        ,ERROR_MESSAGE() AS ErrorMessage
					,null as [StackTrace];    
			  
			END CATCH;  
			  
			IF @@TRANCOUNT > 0  
			    COMMIT TRANSACTION; 
GO
/****** Object:  StoredProcedure [etl].[importIndexesByRegion]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		g.mitsis
-- Create date: 12/03/2023
-- Description:	import Indexes By Region
-- =============================================
CREATE PROCEDURE [etl].[importIndexesByRegion]
	
AS
BEGIN TRANSACTION;  
  
	BEGIN TRY 
			
	
	INSERT INTO [dbo].[INDEXES_BY_REGION]
           ( [IBR_REGION]
			,[IBR_YEAR]
			,[IBR_GDP_PER_CAPITA]
			,[IBR_DOMESTIC_CREDITS]
			,[IBR_INCOME_INDEX]
			,[IBR_ESTIMATED_GNI_FEMALE]
			,[IBR_ESTIMATED_GNI_MALE]
			,[IBR_GDP_TOTAL]
			,[IBR_GNI_PERCAPITA]
			,[IBR_GROSS_FIXED_CAPITAL_FORMATION]
			,[IBR_LABOUR_SHARE_OF_GDP])
     SELECT  [REGION]
			,[YEAR]
			,[GDP_PER_CAPITA]
			,[DOMESTIC_CREDITS]
			,[INCOME_INDEX]
			,[ESTIMATED_GNI_FEMALE]
			,[ESTIMATED_GNI_MALE]
			,[GDP_TOTAL]
			,[GNI_PERCAPITA]
			,[GROSS_FIXED_CAPITAL_FORMATION]
			,[LABOUR_SHARE_OF_GDP]
	FROM [DWH_INTERMIDIATE].[dbo].[INDEXES_BY_REGION]
	
    
	END TRY  
			BEGIN CATCH  

			IF @@TRANCOUNT > 0  
				ROLLBACK TRANSACTION;  

				insert into ErrorLog
			    SELECT
					getdate()
			        ,ERROR_NUMBER() AS ErrorNumber  
			        ,ERROR_SEVERITY() AS ErrorSeverity  
			        ,ERROR_STATE() AS ErrorState  
			        ,'[etl].[importIndexesByRegion]' AS ErrorProcedure  
			        ,ERROR_LINE() AS ErrorLine  
			        ,ERROR_MESSAGE() AS ErrorMessage
					,null as [StackTrace];   
			  
			END CATCH;  
			  
			IF @@TRANCOUNT > 0  
			    COMMIT TRANSACTION; 
GO
/****** Object:  StoredProcedure [etl].[ImportMortalityLifeExpectancy]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		g.mitsis
-- Create date: 12/03/2023
-- Description:	import Indexes By Region
-- =============================================
CREATE PROCEDURE [etl].[ImportMortalityLifeExpectancy]
	
AS
BEGIN TRANSACTION;  
  
	BEGIN TRY 
			
	
	INSERT INTO [dbo].[MORTALITY_LIFE_EXPECTANCY]
           ( [MLE_COUNTRY_ID]
			,[MLE_YEAR]
			,[MLE_INFANT_MORTALITY]
			,[MLE_LIFE_EXPECTANCY]
			,[MLE_MORTALITY_RATE_1TO4]
			,[MLE_MORTALITY_RATE_UNDER5])
     SELECT  [COUNTRY_ID]
			,[YEAR]
			,[INFANT_MORTALITY]
			,[LIFE_EXPECTANCY]
			,[MORTALITY_RATE_1TO4]
			,[MORTALITY_RATE_UNDER5]
	FROM [DWH_INTERMIDIATE].[dbo].[MORTALITY_LIFE_EXPECTANCY]
	
    
	END TRY  
			BEGIN CATCH  

			IF @@TRANCOUNT > 0  
				ROLLBACK TRANSACTION;  

				insert into ErrorLog
			    SELECT
					getdate()
			        ,ERROR_NUMBER() AS ErrorNumber  
			        ,ERROR_SEVERITY() AS ErrorSeverity  
			        ,ERROR_STATE() AS ErrorState  
			        ,'[etl].[ImportMortalityLifeExpectancy]' AS ErrorProcedure  
			        ,ERROR_LINE() AS ErrorLine  
			        ,ERROR_MESSAGE() AS ErrorMessage
					,null as [StackTrace];    
			  
			END CATCH;  
			  
			IF @@TRANCOUNT > 0  
			    COMMIT TRANSACTION; 
GO
/****** Object:  StoredProcedure [etl].[ImportMortalityLifeExpectancyFemale]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		g.mitsis
-- Create date: 12/03/2023
-- Description:	import Indexes By Region
-- =============================================
CREATE PROCEDURE [etl].[ImportMortalityLifeExpectancyFemale]
	
AS
BEGIN TRANSACTION;  
  
	BEGIN TRY 
			
	
	INSERT INTO [dbo].[MORTALITY_LIFE_EXPECTANCY_FEMALE]
           ( [MLEF_COUNTRY_ID]
			,[MLEF_YEAR]
			,[MLEF_INFANT_MORTALITY_FEMALE]
			,[MLEF_LIFE_EXPECTANCY_FEMALE]
			,[MLEF_MORTALITY_RATE_1TO4_FEMALE]
			,[MLEF_MORTALITY_RATE_UNDER5_FEMALE])
     SELECT  [COUNTRY_ID]
			,[YEAR]
			,[INFANT_MORTALITY_FEMALE]
			,[LIFE_EXPECTANCY_FEMALE]
			,[MORTALITY_RATE_1TO4_FEMALE]
			,[MORTALITY_RATE_UNDER5_FEMALE]
	FROM [DWH_INTERMIDIATE].[dbo].[MORTALITY_LIFE_EXPECTANCY_FEMALE]
	
    
	END TRY  
			BEGIN CATCH  

			IF @@TRANCOUNT > 0  
				ROLLBACK TRANSACTION;  

				insert into ErrorLog
			    SELECT
					getdate()
			        ,ERROR_NUMBER() AS ErrorNumber  
			        ,ERROR_SEVERITY() AS ErrorSeverity  
			        ,ERROR_STATE() AS ErrorState  
			        ,'[etl].[ImportMortalityLifeExpectancyFemale]' AS ErrorProcedure  
			        ,ERROR_LINE() AS ErrorLine  
			        ,ERROR_MESSAGE() AS ErrorMessage
					,null as [StackTrace];    
			  
			END CATCH;  
			  
			IF @@TRANCOUNT > 0  
			    COMMIT TRANSACTION; 
GO
/****** Object:  StoredProcedure [etl].[ImportMortalityLifeExpectancyMale]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		g.mitsis
-- Create date: 12/03/2023
-- Description:	import Indexes By Region
-- =============================================
CREATE PROCEDURE [etl].[ImportMortalityLifeExpectancyMale]
	
AS
BEGIN TRANSACTION;  
  
	BEGIN TRY 
			
	
	INSERT INTO [dbo].[MORTALITY_LIFE_EXPECTANCY_MALE]
           ( [MLEM_COUNTRY_ID]
			,[MLEM_YEAR]
			,[MLEM_INFANT_MORTALITY_MALE]
			,[MLEM_LIFE_EXPECTANCY_MALE]
			,[MLEM_MORTALITY_RATE_1TO4_MALE]
			,[MLEM_MORTALITY_RATE_UNDER5_MALE])
     SELECT  [COUNTRY_ID]
			,[YEAR]
			,[INFANT_MORTALITY_MALE]
			,[LIFE_EXPECTANCY_MALE]
			,[MORTALITY_RATE_1TO4_MALE]
			,[MORTALITY_RATE_UNDER5_MALE]
	FROM [DWH_INTERMIDIATE].[dbo].[MORTALITY_LIFE_EXPECTANCY_MALE]
	
    
	END TRY  
			BEGIN CATCH  

			IF @@TRANCOUNT > 0  
				ROLLBACK TRANSACTION;  

				insert into ErrorLog
			    SELECT
					getdate()
			        ,ERROR_NUMBER() AS ErrorNumber  
			        ,ERROR_SEVERITY() AS ErrorSeverity  
			        ,ERROR_STATE() AS ErrorState  
			        ,'[etl].[ImportMortalityLifeExpectancyMale]' AS ErrorProcedure  
			        ,ERROR_LINE() AS ErrorLine  
			        ,ERROR_MESSAGE() AS ErrorMessage
					,null as [StackTrace];   
			  
			END CATCH;  
			  
			IF @@TRANCOUNT > 0  
			    COMMIT TRANSACTION; 
GO
/****** Object:  StoredProcedure [etl].[ImportPopulationDemographicRatesGeneral]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		g.mitsis
-- Create date: 12/03/2023
-- Description:	import Population Demographic Rates General
-- =============================================
CREATE PROCEDURE [etl].[ImportPopulationDemographicRatesGeneral]
	
AS
BEGIN TRANSACTION;  
  
	BEGIN TRY 
			
	
	INSERT INTO [dbo].[POPULATION_DEMOGRAPHIC_RATES_GENERAL]
           ( [PDRG_COUNTRY_ID]
			,[PDRG_YEAR]
			,[PDRG_INFANT_MORTALITY]
			,[PDRG_LIFE_EXPECTANCY]
			,[PDRG_MORTALITY_RATE_1TO4]
			,[PDRG_MORTALITY_RATE_UNDER5]
			,[PDRG_GROSS_REPRODUCTION_RATE]
			,[PDRG_SEX_RATIO_AT_BIRTH]
			,[PDRG_CRUDE_BIRTH_RATE]
			,[PDRG_CRUDE_DEATH_RATE]
			,[PDRG_GROWTH_RATE]
			,[PDRG_NET_MIGRATION]
			,[PDRG_RATE_NATURAL_INCREASE])
     SELECT  [COUNTRY_ID]
			,[YEAR]
			,[INFANT_MORTALITY]
			,[LIFE_EXPECTANCY]
			,[MORTALITY_RATE_1TO4]
			,[MORTALITY_RATE_UNDER5]
			,[GROSS_REPRODUCTION_RATE]
			,[SEX_RATIO_AT_BIRTH]
			,[CRUDE_BIRTH_RATE]
			,[CRUDE_DEATH_RATE]
			,[GROWTH_RATE]
			,[NET_MIGRATION]
			,[RATE_NATURAL_INCREASE]
	FROM [DWH_INTERMIDIATE].[dbo].[POPULATION_DEMOGRAPHIC_RATES_GENERAL]
	
    
	END TRY  
			BEGIN CATCH  

			IF @@TRANCOUNT > 0  
				ROLLBACK TRANSACTION;  

				insert into ErrorLog
			    SELECT
					getdate()
			        ,ERROR_NUMBER() AS ErrorNumber  
			        ,ERROR_SEVERITY() AS ErrorSeverity  
			        ,ERROR_STATE() AS ErrorState  
			        ,'[etl].[ImportPopulationDemographicRatesGeneral]' AS ErrorProcedure  
			        ,ERROR_LINE() AS ErrorLine  
			        ,ERROR_MESSAGE() AS ErrorMessage
					,null as [StackTrace];    
			  
			END CATCH;  
			  
			IF @@TRANCOUNT > 0  
			    COMMIT TRANSACTION; 
GO
/****** Object:  StoredProcedure [etl].[ImportPopulationFemale]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		g.mitsis
-- Create date: 12/03/2023
-- Description:	import Population Female
-- =============================================
CREATE PROCEDURE [etl].[ImportPopulationFemale]
	
AS
BEGIN TRANSACTION;  
  
	BEGIN TRY 
			
	
	INSERT INTO [dbo].[POPULATION_FEMALE]
           ( [PF_COUNTRY_ID]
			,[PF_YEAR]
			,[PF_MAX_AGE]
			,[PF_AGE_FLAG]
			,[PF_POPULATION_FEMALE])
     SELECT  [COUNTRY_ID]
			,[YEAR]
			,[MAX_AGE]
			,[AGE_FLAG]
			,[POPULATION_FEMALE]
	FROM [DWH_INTERMIDIATE].[dbo].[POPULATION_FEMALE]
	
    
	END TRY  
			BEGIN CATCH  

			IF @@TRANCOUNT > 0  
				ROLLBACK TRANSACTION;  

				insert into ErrorLog
			    SELECT
					getdate()
			        ,ERROR_NUMBER() AS ErrorNumber  
			        ,ERROR_SEVERITY() AS ErrorSeverity  
			        ,ERROR_STATE() AS ErrorState  
			        ,'[etl].[ImportPopulationFemale]' AS ErrorProcedure  
			        ,ERROR_LINE() AS ErrorLine  
			        ,ERROR_MESSAGE() AS ErrorMessage
					,null as [StackTrace];   
			  
			END CATCH;  
			  
			IF @@TRANCOUNT > 0  
			    COMMIT TRANSACTION;  
GO
/****** Object:  StoredProcedure [etl].[ImportPopulationFemaleOnPeriod]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		g.mitsis
-- Create date: 12/03/2023
-- Description:	import Population Female
-- =============================================
CREATE PROCEDURE [etl].[ImportPopulationFemaleOnPeriod]
	
AS
BEGIN TRANSACTION;  
  
	BEGIN TRY 
			
	
	INSERT INTO [dbo].[POPULATION_FEMALE_ON_PERIOD]
           ([PF_COUNTRY_ID]
           ,[PF_YEAR]
           ,[PF_TOTAL_FLAG]
           ,[PF_STARTING_AGE]
           ,[PF_AGE_GROUP_INDICATOR]
           ,[PF_ENDING_AGE]
           ,[PF_POPULATION_FEMALE])
     SELECT [COUNTRY_ID]
      ,[PF_YEAR]
      ,[PF_TOTAL_FLAG]
      ,[PF_STARTING_AGE]
      ,[PF_AGE_GROUP_INDICATOR]
      ,[PF_ENDING_AGE]
      ,[PF_POPULATION_FEMALE]
  FROM DWH_INTERMIDIATE.[dbo].[POPULATION_FEMALE_ON_PERIOD]
	
    
	END TRY  
			BEGIN CATCH  

			IF @@TRANCOUNT > 0  
				ROLLBACK TRANSACTION;  

				insert into ErrorLog
			    SELECT
					getdate()
			        ,ERROR_NUMBER() AS ErrorNumber  
			        ,ERROR_SEVERITY() AS ErrorSeverity  
			        ,ERROR_STATE() AS ErrorState  
			        ,'[etl].[ImportPopulationFemaleOnPeriod]' AS ErrorProcedure  
			        ,ERROR_LINE() AS ErrorLine  
			        ,ERROR_MESSAGE() AS ErrorMessage
					,null as [StackTrace];   
			  
			END CATCH;  
			  
			IF @@TRANCOUNT > 0  
			    COMMIT TRANSACTION;  
GO
/****** Object:  StoredProcedure [etl].[ImportPopulationMale]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		g.mitsis
-- Create date: 12/03/2023
-- Description:	import Population Female
-- =============================================
CREATE PROCEDURE [etl].[ImportPopulationMale]
	
AS
BEGIN TRANSACTION;  
  
	BEGIN TRY 
			
	
	INSERT INTO [dbo].[POPULATION_MALE]
           ( [PM_COUNTRY_ID]
			,[PM_YEAR]
			,[PM_MAX_AGE]
			,[PM_AGE_FLAG]
			,[PM_POPULATION_MALE])
     SELECT  [COUNTRY_ID]
			,[YEAR]
			,[MAX_AGE]
			,[AGE_FLAG]
			,[POPULATION_MALE]
	FROM [DWH_INTERMIDIATE].[dbo].[POPULATION_MALE]
	
    
	END TRY  
			BEGIN CATCH  

			IF @@TRANCOUNT > 0  
				ROLLBACK TRANSACTION;  

				insert into ErrorLog
			    SELECT
					getdate()
			        ,ERROR_NUMBER() AS ErrorNumber  
			        ,ERROR_SEVERITY() AS ErrorSeverity  
			        ,ERROR_STATE() AS ErrorState  
			        ,'[etl].[ImportPopulationMale]' AS ErrorProcedure  
			        ,ERROR_LINE() AS ErrorLine  
			        ,ERROR_MESSAGE() AS ErrorMessage
					,null as [StackTrace];    
			  
			END CATCH;  
			  
			IF @@TRANCOUNT > 0  
			    COMMIT TRANSACTION; 
GO
/****** Object:  StoredProcedure [etl].[ImportPopulationMaleOnPeriod]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		g.mitsis
-- Create date: 12/03/2023
-- Description:	import Population Female
-- =============================================
create PROCEDURE [etl].[ImportPopulationMaleOnPeriod]
	
AS
BEGIN TRANSACTION;  
  
	BEGIN TRY 
			
	
	INSERT INTO [dbo].[POPULATION_MALE_ON_PERIOD]
           ([PM_COUNTRY_ID]
           ,[PM_YEAR]
           ,[PM_TOTAL_FLAG]
           ,[PM_STARTING_AGE]
           ,[PM_AGE_GROUP_INDICATOR]
           ,[PM_ENDING_AGE]
           ,[PM_POPULATION_FEMALE])
     SELECT [COUNTRY_ID]
      ,[PM_YEAR]
      ,[PM_TOTAL_FLAG]
      ,[PM_STARTING_AGE]
      ,[PM_AGE_GROUP_INDICATOR]
      ,[PM_ENDING_AGE]
      ,[PM_POPULATION_FEMALE]
  FROM DWH_INTERMIDIATE.[dbo].[POPULATION_MALE_ON_PERIOD]
	
    
	END TRY  
			BEGIN CATCH  

			IF @@TRANCOUNT > 0  
				ROLLBACK TRANSACTION;  

				insert into ErrorLog
			    SELECT
					getdate()
			        ,ERROR_NUMBER() AS ErrorNumber  
			        ,ERROR_SEVERITY() AS ErrorSeverity  
			        ,ERROR_STATE() AS ErrorState  
			        ,'[etl].[ImportPopulationMaleOnPeriod]' AS ErrorProcedure  
			        ,ERROR_LINE() AS ErrorLine  
			        ,ERROR_MESSAGE() AS ErrorMessage
					,null as [StackTrace];   
			  
			END CATCH;  
			  
			IF @@TRANCOUNT > 0  
			    COMMIT TRANSACTION;  
GO
/****** Object:  StoredProcedure [etl].[ImportPopulationMidyearOnPeriod]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		g.mitsis
-- Create date: 12/03/2023
-- Description:	import Population Female
-- =============================================
CREATE PROCEDURE [etl].[ImportPopulationMidyearOnPeriod]
	
AS
BEGIN TRANSACTION;  
  
	BEGIN TRY 
			
	
	INSERT INTO [dbo].[POPULATION_MIDYAER_ON_PERIOD]
           ( [PMOP_COUNTRY_ID]
			,[PMOP_YEAR]
			,[PMOP_TOTAL_FLAG]
			,[PMOP_STARTING_AGE]
			,[PMOP_AGE_GROUP_INDICATOR]
			,[PMOP_ENDING_AGE]
			,[PMOP_MIDYEAR_POPULATION])
     SELECT  [COUNTRY_ID]
			,[YEAR]
			,[TOTAL_FLAG]
			,[STARTING_AGE]
			,[AGE_GROUP_INDICATOR]
			,[ENDING_AGE]
			,[MIDYEAR_POPULATION]
	FROM [DWH_INTERMIDIATE].[dbo].[POPULATION_MIDYAER_ON_PERIOD]
	
    
	END TRY  
			BEGIN CATCH  

			IF @@TRANCOUNT > 0  
				ROLLBACK TRANSACTION;  

				insert into ErrorLog
			    SELECT
					getdate()
			        ,ERROR_NUMBER() AS ErrorNumber  
			        ,ERROR_SEVERITY() AS ErrorSeverity  
			        ,ERROR_STATE() AS ErrorState  
			        ,'[etl].[ImportPopulationMidyearOnPeriod]' AS ErrorProcedure  
			        ,ERROR_LINE() AS ErrorLine  
			        ,ERROR_MESSAGE() AS ErrorMessage
					,null as [StackTrace];    
			  
			END CATCH;  
			  
			IF @@TRANCOUNT > 0  
			    COMMIT TRANSACTION; 
GO
/****** Object:  StoredProcedure [etl].[ImportPopulationMidyearOnPeriodFemale]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		g.mitsis
-- Create date: 12/03/2023
-- Description:	import Population Female
-- =============================================
CREATE PROCEDURE [etl].[ImportPopulationMidyearOnPeriodFemale]
	
AS
BEGIN TRANSACTION;  
  
	BEGIN TRY 
			
	
	INSERT INTO [dbo].[POPULATION_MIDYEAR_ON_PERIOD_FEMALE]
           ( [PMOPF_COUNTRY_ID]
			,[PMOPF_YEAR]
			,[PMOPF_TOTAL_FLAG]
			,[PMOPF_STARTING_AGE]
			,[PMOPF_AGE_GROUP_INDICATOR]
			,[PMOPF_ENDING_AGE]
			,[PMOPF_MIDYEAR_POPULATION_FEMALE])
     SELECT  [COUNTRY_ID]
			,[YEAR]
			,[TOTAL_FLAG]
			,[STARTING_AGE]
			,[AGE_GROUP_INDICATOR]
			,[ENDING_AGE]
			,[MIDYEAR_POPULATION_FEMALE]
	FROM [DWH_INTERMIDIATE].[dbo].[POPULATION_MIDYEAR_ON_PERIOD_FEMALE]
	
    
	END TRY  
			BEGIN CATCH  

			IF @@TRANCOUNT > 0  
				ROLLBACK TRANSACTION;  

				insert into ErrorLog
			    SELECT
					getdate()
			        ,ERROR_NUMBER() AS ErrorNumber  
			        ,ERROR_SEVERITY() AS ErrorSeverity  
			        ,ERROR_STATE() AS ErrorState  
			        ,'[etl].[ImportPopulationMidyearOnPeriodFemale]' AS ErrorProcedure  
			        ,ERROR_LINE() AS ErrorLine  
			        ,ERROR_MESSAGE() AS ErrorMessage
					,null as [StackTrace];    
			  
			END CATCH;  
			  
			IF @@TRANCOUNT > 0  
			    COMMIT TRANSACTION; 
GO
/****** Object:  StoredProcedure [etl].[ImportPopulationMidyearOnPeriodMale]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		g.mitsis
-- Create date: 12/03/2023
-- Description:	import Population Female
-- =============================================
CREATE PROCEDURE [etl].[ImportPopulationMidyearOnPeriodMale]
	
AS
BEGIN TRANSACTION;  
  
	BEGIN TRY 
			
	
	INSERT INTO [dbo].[POPULATION_MIDYEAR_ON_PERIOD_MALE]
           ( [PMOPM_COUNTRY_ID]
			,[PMOPM_YEAR]
			,[PMOPM_TOTAL_FLAG]
			,[PMOPM_STARTING_AGE]
			,[PMOPM_AGE_GROUP_INDICATOR]
			,[PMOPM_ENDING_AGE]
			,[PMOPM_MIDYEAR_POPULATION_MALE])
     SELECT  [COUNTRY_ID]
			,[YEAR]
			,[TOTAL_FLAG]
			,[STARTING_AGE]
			,[AGE_GROUP_INDICATOR]
			,[ENDING_AGE]
			,[MIDYEAR_POPULATION_MALE]
	FROM [DWH_INTERMIDIATE].[dbo].POPULATION_MIDYEAR_ON_PERIOD_MALE
	
    
	END TRY  
			BEGIN CATCH  

			IF @@TRANCOUNT > 0  
				ROLLBACK TRANSACTION;  

				insert into ErrorLog
			    SELECT
					getdate()
			        ,ERROR_NUMBER() AS ErrorNumber  
			        ,ERROR_SEVERITY() AS ErrorSeverity  
			        ,ERROR_STATE() AS ErrorState  
			        ,'[etl].[ImportPopulationMidyearOnPeriodMale]' AS ErrorProcedure  
			        ,ERROR_LINE() AS ErrorLine  
			        ,ERROR_MESSAGE() AS ErrorMessage
					,null as [StackTrace];    
			  
			END CATCH;  
			  
			IF @@TRANCOUNT > 0  
			    COMMIT TRANSACTION;  
GO
/****** Object:  StoredProcedure [rpt].[GetChartGeneralData]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [rpt].[GetChartGeneralData] @string varchar(max) = null
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	drop table if exists #data--212,219,2000
drop table if exists #columnsToSearch
	declare @chartType varchar(256)
	declare @countryIds varchar(300)	
	declare @columnNames varchar(1000)
	declare @AgreegateFunction varchar(20)
	declare @ChooseYear varchar(10)
	declare @ChoosingGroups varchar(100)
	declare @YearAggregation varchar(10)

	declare @oneCountryFlg tinyint = case when CHARINDEX(',',@countryIds) = 0 then 1 else 0 end
	declare @oneColumnIndiceFlg tinyint = case when CHARINDEX(',',@columnNames) = 0 then 1 else 0 end

	select *,ROW_NUMBER() over (order by (select null)) rn into #data from string_split(@string,'/')
	--select * from #data
	select @chartType = a.[value] from #data a where a.rn = 3
	select @countryIds = a.[value] from #data a where a.rn = 5
	select @columnNames = a.[value] from #data a where a.rn = 7
	select @AgreegateFunction = a.[value] from #data a where a.rn = 9
	select @ChooseYear = a.[value] from #data a where a.rn = 11
	select @ChoosingGroups = a.[value] from #data a where a.rn = 13
	select @YearAggregation = a.[value] from #data a where a.rn = 15

	select [value] as COLUMN_NAME into #columnsToSearch from string_split(@columnNames,',')


	/*var chart = new CanvasJS.Chart("chartContainer", {
	title: {
		text: "House Median Price"
	},
	axisY2: {
		title: "Median List Price",
		prefix: "$",
		suffix: "K"
	},
	toolTip: {
		shared: true
	},
	legend: {
		cursor: "pointer",
		verticalAlign: "top",
		horizontalAlign: "center",
		dockInsidePlotArea: true,
		itemclick: toogleDataSeries
	},*/
	if @chartType = 'line'
	begin 
		select 'Cart Of '+@columnNames as [text],@columnNames as [title],'true' [shared],'pointer' as [cursor],'top' as verticalAlign,'center' as horizontalAlign,'true' as dockInsidePlotArea
	end
end

GO
/****** Object:  StoredProcedure [rpt].[GetColumnNames]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [rpt].[GetColumnNames]
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT 
		[COLUMN_NAME] as databaseColumnName
		,[DESCRIPTIONS] as columnName 
		FROM [DWH].[dbo].[ELEMENTS_TO_CHART] 
		where [COLUMN_NAME] not like '%year' 
		and [COLUMN_NAME] not like '%flag'
		and [COLUMN_NAME] not like '%indic%'
		and [COLUMN_NAME] not like '%starting%'
		and [COLUMN_NAME] not like '%ending%'
		and [COLUMN_NAME] not like '%max_age%'
		and [COLUMN_NAME] not like '%name%'
		and [COLUMN_NAME] not like '%descr%'

END
GO
/****** Object:  StoredProcedure [rpt].[ProduceResults]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [rpt].[ProduceResults] @string varchar(max) = null
	
AS
BEGIN
	SET NOCOUNT ON;
	drop table if exists #data--212,219,2000
	drop table if exists #columnsToSearch
	drop table if exists #yearsGap
	drop table if exists #table_columns_starting_ending_age

	CREATE TABLE #table_columns_starting_ending_age
	(
		TABLE_NAME VARCHAR(300)
		,STARTING_AGE VARCHAR(100)
		,ENDING_AGE VARCHAR(100)
	)

	declare @chartType varchar(256)
	declare @countryIds varchar(300)	
	declare @columnNames varchar(1000)
	declare @AgreegateFunction varchar(20)
	declare @ChooseYear varchar(10)
	declare @ChoosingGroups varchar(100)
	declare @YearAggregation varchar(10)

	declare @IndiceHasAflg tinyint = 0
	
	
	declare @oneCountryFlg tinyint = case when CHARINDEX(',',@countryIds) = 0 then 1 else 0 end
	declare @oneColumnIndiceFlg tinyint = case when CHARINDEX(',',@columnNames) = 0 then 1 else 0 end
	declare @starting_age varchar(3)
	declare @ending_age varchar(3)

	select *,ROW_NUMBER() over (order by (select null)) rn into #data from string_split(@string,'/')
	--select * from #data
	select @chartType = a.[value] from #data a where a.rn = 3
	select @countryIds = a.[value] from #data a where a.rn = 5
	select @columnNames = a.[value] from #data a where a.rn = 7
	select @AgreegateFunction = a.[value] from #data a where a.rn = 9
	select @ChooseYear = a.[value] from #data a where a.rn = 11
	select @ChoosingGroups = a.[value] from #data a where a.rn = 13
	select @YearAggregation = a.[value] from #data a where a.rn = 15

	SET @AgreegateFunction = CASE WHEN @AgreegateFunction = 'NONE' AND @YearAggregation <> 'NONE' THEN 'AVG' ELSE @AgreegateFunction END
	--SELECT @AgreegateFunction
	select 
		[value] as COLUMN_NAME
		,ROW_NUMBER() over ( order by  (select null)) rn
		into #columnsToSearch from string_split(@columnNames,',')

	declare @ifSql varchar(max) = ''
	if @ChoosingGroups <> 'none'--an thelw pleiada apo xwres
	begin
		declare @groupType varchar(100) = substring(@ChoosingGroups,1,charindex('.',@ChoosingGroups)-1)
		declare @groupDerscription varchar(100) = substring(@ChoosingGroups,charindex('.',@ChoosingGroups)+1,len(@ChoosingGroups)-charindex('.',@ChoosingGroups))
		
		--select @groupType,@groupDerscription
		
		select @ifSql = @ifSql + 'select COUNTRY_ID from countries where '+COLUMN_NAME + ' like '+''''+@groupDerscription+'''' from INFORMATION_SCHEMA.COLUMNS a where a.TABLE_NAME = 'countries' and a.COLUMN_NAME = 'C_'+@groupType
		 
	end

	--vriskoume an exoyme kolona me xronia ilikias apo ews
	set @oneColumnIndiceFlg = case when CHARINDEX('-',@ChooseYear)<>0 then 1 else 0 end
	if @oneColumnIndiceFlg = 1 
	begin 
		
		select convert(int,[value]) as [value]
		,ROW_NUMBER() over ( order by convert(int,[value])) rn 		
		into #yearsGap
		from string_split(@ChooseYear,'-')
		set @starting_age = (select convert(varchar(3),[value]) from #yearsGap where rn=1)
		set @ending_age = (select convert(varchar(3),[value]) from #yearsGap where rn=2)

		--get flaged columns from table
		;with TABLE_NAMES_OF_FALGED_COLUMNS AS (
		select distinct TABLE_NAME from INFORMATION_SCHEMA.columns a
		inner join #columnsToSearch b on a.COLUMN_NAME = b.COLUMN_NAME
		)
		INSERT INTO #table_columns_starting_ending_age
		SELECT 
			PIV.TABLE_NAME
			,MAX(PIV.[1]) STARTING_AGE
			,MAX(PIV.[2]) ENDING_AGE
			
		FROM (
		SELECT 
			A.TABLE_NAME
			,B.COLUMN_NAME 
			,ROW_NUMBER() over (PARTITION BY A.TABLE_NAME order by B.COLUMN_NAME desc) rn 		
		FROM TABLE_NAMES_OF_FALGED_COLUMNS A
		INNER JOIN INFORMATION_SCHEMA.COLUMNS B ON A.TABLE_NAME = B.TABLE_NAME
		WHERE B.COLUMN_NAME LIKE '%STARTING_AGE%' 
		OR B.COLUMN_NAME LIKE '%ENDING_AGE%'
		) T
		pivot
		(
			MAX(t.COLUMN_NAME)  
			FOR rn IN ([1], [2])  
		) as piv
		GROUP BY PIV.TABLE_NAME
	end	
	--SELECT * FROM #table_columns_starting_ending_age

	declare @sql varchar(max) = ''
	if @chartType = 'line' 
	begin
		if @ChoosingGroups = 'none' and CHARINDEX(',',@countryIds) = 0--we want  data for more than one year
		begin
			select @sql = @sql+
					'select  '+char(10)
					+''''+@chartType+''''+'as [text] ,'+char(10)
					+''''+ltrim(rtrim(DESCRIPTIONS))+''''+' as [name],'+char(10)							
					+(CASE WHEN @YearAggregation <> 'none' THEN 'FLOOR(' ELSE '' END)--an exoume agreegation
					+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR'+
					(CASE WHEN @YearAggregation <> 'none' THEN ' / '+CONVERT(VARCHAR(20),@YearAggregation)+') * '+CONVERT(VARCHAR(20),@YearAggregation)+' '  ELSE '' END)--an exoume agreegation
					+' as x,'+char(10)
					+(CASE WHEN @YearAggregation <> 'none' THEN +@AgreegateFunction+'(' ELSE '' END)+'ISNULL(' +a.COLUMN_NAME+',0)'+(CASE WHEN @AgreegateFunction <> 'none' THEN +')' ELSE '' END)+' AS y'+char(10)+
					' from '+TABLE_CATALOG+'.'+TABLE_SCHEMA+'.'+a.TABLE_NAME+
					' where '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID IN ('+case when @countryIds = 'none' and @ChoosingGroups <> 'none' then @ifSql else @countryIds end +')' 
					+case when d.STARTING_AGE is not null then (case when @oneColumnIndiceFlg = 1 then char(10)+' and '+ d.STARTING_AGE+' = '+@starting_age +' and '+d.ENDING_AGE+' = '+@ending_age else '' end ) else '' end+
					+(
						CASE 
							WHEN @YearAggregation <> 'none' THEN 
							+CHAR(10)+'group by FLOOR('+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR '+' / '+CONVERT(VARCHAR(20),@YearAggregation)+') * '+CONVERT(VARCHAR(20),@YearAggregation)+' ' 							
							ELSE 
							'' 
						END
					)

					--+char(10)+ ' order by '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR asc,[name] asc'
					+char(10)+'union all'+char(10)
				from INFORMATION_SCHEMA.COLUMNS a 
				inner join ELEMENTS_TO_CHART b on a.COLUMN_NAME = b.COLUMN_NAME
				inner join #columnsToSearch c on b.COLUMN_NAME = c.COLUMN_NAME
				LEFT JOIN #table_columns_starting_ending_age d on a.TABLE_NAME = d.TABLE_NAME
				
			set @sql =  left (@SQL,len(@sql)-len('union all')-1)+ ' order by [name] asc,x asc'
		end	
		if @ChoosingGroups <> 'none' or CHARINDEX(',',@countryIds) <> 0
		begin
			select @sql = @sql+
				'select  '+char(10)
				+''''+@chartType+''''+'as [text] ,'+char(10)
				+(case when @oneColumnIndiceFlg = 1 then 'c.C_DISPLAY_NAME' else 'c.C_DISPLAY_NAME'+' + '+''''+' - '+ltrim(rtrim(DESCRIPTIONS)) + '''' end)+' as [name],'+char(10)		
				+(CASE WHEN @YearAggregation <> 'none' THEN 'FLOOR(' ELSE '' END)--an exoume agreegation
				+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR'+
				(CASE WHEN @YearAggregation <> 'none' THEN ' / '+CONVERT(VARCHAR(20),@YearAggregation)+') * '+CONVERT(VARCHAR(20),@YearAggregation)+' '  ELSE '' END)--an exoume agreegation
				+' as x,'+char(10)

				+(CASE WHEN @YearAggregation <> 'none'  THEN +@AgreegateFunction+'(' ELSE '' END)+'ISNULL(' +a.COLUMN_NAME+',0)'+(CASE WHEN  @YearAggregation <> 'none' THEN +')' ELSE '' END)+' AS y'+char(10)+
				' from '+TABLE_CATALOG+'.'+TABLE_SCHEMA+'.'+a.TABLE_NAME+char(10)
				+'inner join countries c on '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID = c.country_id'+
				' where '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID IN ('+case when @countryIds = 'none' and @ChoosingGroups <> 'none' then @ifSql else @countryIds end +')' 
				+case when d.STARTING_AGE is not null then (case when @oneColumnIndiceFlg = '1' then char(10)+' and '+ d.STARTING_AGE+' = '+@starting_age +' and '+d.ENDING_AGE+' = '+@ending_age else '' end ) else '' end+
				+(
						CASE 
							WHEN @YearAggregation <> 'none' THEN 
							+CHAR(10)+'group by C_DISPLAY_NAME,FLOOR('+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR '+' / '+CONVERT(VARCHAR(20),@YearAggregation)+') * '+CONVERT(VARCHAR(20),@YearAggregation)+' ' 							
							ELSE 
							'' 
						END
					)
				+char(10)+'union'+char(10)		
			from INFORMATION_SCHEMA.COLUMNS a 
			inner join ELEMENTS_TO_CHART b on a.COLUMN_NAME = b.COLUMN_NAME
			inner join #columnsToSearch c on b.COLUMN_NAME = c.COLUMN_NAME
			LEFT JOIN #table_columns_starting_ending_age d on a.TABLE_NAME = d.TABLE_NAME

			set @sql =  left (@SQL,len(@sql)-len('union')-1)+ ' order by [name] asc,x asc'
		end
	end
	
	if @chartType = 'scatter' 
	begin
		if (select count(*) from #columnsToSearch) <>2 --an exoume den dialexei akrivws 2 sthles
		begin
			select '' as [text],'' as [name],'' as [x], '' as [y]
		end
		select @sql = @sql+
				'select  '+char(10)
				+''''+@chartType+''''+'as [text] ,'+char(10)
				+'c.C_DISPLAY_NAME'+' as [name],'+char(10)		
				+(CASE WHEN @YearAggregation <> 'none'  THEN +@AgreegateFunction+'(' ELSE '' END)+'ISNULL(' +(select aa.COLUMN_NAME from #columnsToSearch aa where rn = 1)+',0)'+(CASE WHEN  @YearAggregation <> 'none' THEN +')' ELSE '' END)+ ' as x,'+char(10)
				+(CASE WHEN @YearAggregation <> 'none'  THEN +@AgreegateFunction+'(' ELSE '' END)+'ISNULL(' +(select aa.COLUMN_NAME from #columnsToSearch aa where rn = 2)+',0)'+(CASE WHEN  @YearAggregation <> 'none' THEN +')' ELSE '' END)+ ' AS y'+char(10)+
				' from '+TABLE_CATALOG+'.'+TABLE_SCHEMA+'.'+a.TABLE_NAME+char(10)
				+'inner join countries c on '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID = c.country_id'+
				' where '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID IN ('+case when @countryIds = 'none' and @ChoosingGroups <> 'none' then @ifSql else @countryIds end +')' 
				+case when d.STARTING_AGE is not null then (case when @oneColumnIndiceFlg = 1 then char(10)+' and '+ d.STARTING_AGE+' = '+@starting_age +' and '+d.ENDING_AGE+' = '+@ending_age else '' end ) else '' end+
				--+ (CASE WHEN LEN(@countryIds) >1 and @AgreegateFunction <> 'none' THEN +'GROUP BY '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR' ELSE '' END)
				+(
						CASE 
							WHEN @YearAggregation <> 'none' THEN 
							+CHAR(10)+'group by C_DISPLAY_NAME,FLOOR('+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR '+' / '+CONVERT(VARCHAR(20),@YearAggregation)+') * '+CONVERT(VARCHAR(20),@YearAggregation)+' ' 							
							ELSE 
							'' 
						END
					)
				+char(10)+'union'+char(10)		
			from INFORMATION_SCHEMA.COLUMNS a 
			inner join ELEMENTS_TO_CHART b on a.COLUMN_NAME = b.COLUMN_NAME
			inner join #columnsToSearch c on b.COLUMN_NAME = c.COLUMN_NAME
			LEFT JOIN #table_columns_starting_ending_age d on a.TABLE_NAME = d.TABLE_NAME

			set @sql =  left (@SQL,len(@sql)-len('union')-1)+ ' order by [name] asc,x asc'
	end
		   
	if @chartType = 'bar' 
		begin
			if @ChoosingGroups = 'none' and CHARINDEX(',',@countryIds) = 0--we want  data for more than one year
			begin
				select @sql = @sql+
						'select  '+char(10)
						+''''+@chartType+''''+'as [text] ,'+char(10)
						+''''+ltrim(rtrim(DESCRIPTIONS))+''''+' as [name],'+char(10)
						+(CASE WHEN @YearAggregation <> 'none' THEN 'FLOOR(' ELSE '' END)--an exoume agreegation
						+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR'+ 
						+(CASE WHEN @YearAggregation <> 'none' THEN ' / '+CONVERT(VARCHAR(20),@YearAggregation)+') * '+CONVERT(VARCHAR(20),@YearAggregation)+' '  ELSE '' END)--an exoume agreegation
						+' as x,'+char(10)
						+(CASE WHEN @YearAggregation <> 'none'  THEN +@AgreegateFunction+'(' ELSE '' END)+'ISNULL(' +a.COLUMN_NAME+',0)'+(CASE WHEN  @YearAggregation <> 'none' THEN +')' ELSE '' END)+' AS y'+char(10)+
						' from '+TABLE_CATALOG+'.'+TABLE_SCHEMA+'.'+a.TABLE_NAME+
						' where '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID IN ('+case when @countryIds = 'none' and @ChoosingGroups <> 'none' then @ifSql else @countryIds end +')' 
						+case when d.STARTING_AGE is not null then (case when @oneColumnIndiceFlg = 1 then char(10)+' and '+ d.STARTING_AGE+' = '+@starting_age +' and '+d.ENDING_AGE+' = '+@ending_age else '' end ) else '' end+
						+ (CASE WHEN LEN(@countryIds) >1 and @AgreegateFunction <> 'none' THEN +'GROUP BY '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR' ELSE '' END)
						+(
							CASE 
								WHEN @YearAggregation <> 'none' THEN 
								+CHAR(10)+'group by FLOOR('+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR '+' / '+CONVERT(VARCHAR(20),@YearAggregation)+') * '+CONVERT(VARCHAR(20),@YearAggregation)+' ' 							
								ELSE 
								'' 
							END
						)
						+char(10)+'union all'+char(10)
					from INFORMATION_SCHEMA.COLUMNS a 
					inner join ELEMENTS_TO_CHART b on a.COLUMN_NAME = b.COLUMN_NAME
					inner join #columnsToSearch c on b.COLUMN_NAME = c.COLUMN_NAME
					LEFT JOIN #table_columns_starting_ending_age d on a.TABLE_NAME = d.TABLE_NAME
					
				set @sql =  left (@SQL,len(@sql)-len('union all')-1)+ ' order by [name] asc,x asc'
			end	
			if @ChoosingGroups <> 'none' or CHARINDEX(',',@countryIds) <> 0
			begin
				select @sql = @sql+
					'select  '+char(10)
					+''''+@chartType+''''+'as [text] ,'+char(10)
					+(case when @oneColumnIndiceFlg = 1 then 'c.C_DISPLAY_NAME' else 'c.C_DISPLAY_NAME'+' + '+''''+' - '+ltrim(rtrim(DESCRIPTIONS)) + '''' end)+' as [name],'+char(10)		
					+(CASE WHEN @YearAggregation <> 'none' THEN 'FLOOR(' ELSE '' END)--an exoume agreegation
					+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR '+
					+(CASE WHEN @YearAggregation <> 'none' THEN ' / '+CONVERT(VARCHAR(20),@YearAggregation)+') * '+CONVERT(VARCHAR(20),@YearAggregation)+' '  ELSE '' END)--an exoume agreegation
					+' as x,'+char(10)
					+(CASE WHEN @YearAggregation <> 'none'  THEN +@AgreegateFunction+'(' ELSE '' END)+'ISNULL(' +a.COLUMN_NAME+',0)'+(CASE WHEN  @YearAggregation <> 'none' THEN +')' ELSE '' END)+' AS y'+char(10)+
					' from '+TABLE_CATALOG+'.'+TABLE_SCHEMA+'.'+a.TABLE_NAME+char(10)
					+'inner join countries c on '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID = c.country_id'+
					' where '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID IN ('+case when @countryIds = 'none' and @ChoosingGroups <> 'none' then @ifSql else @countryIds end +')' 
					+case when d.STARTING_AGE is not null then (case when @oneColumnIndiceFlg = 1 then char(10)+' and '+ d.STARTING_AGE+' = '+@starting_age +' and '+d.ENDING_AGE+' = '+@ending_age else '' end ) else '' end+					
					+(
						CASE 
							WHEN @YearAggregation <> 'none' THEN 
							+CHAR(10)+'group by C_DISPLAY_NAME,FLOOR('+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR '+' / '+CONVERT(VARCHAR(20),@YearAggregation)+') * '+CONVERT(VARCHAR(20),@YearAggregation)+' ' 							
							ELSE 
							'' 
						END
					)
					+char(10)+'union'+char(10)		
				from INFORMATION_SCHEMA.COLUMNS a 
				inner join ELEMENTS_TO_CHART b on a.COLUMN_NAME = b.COLUMN_NAME
				inner join #columnsToSearch c on b.COLUMN_NAME = c.COLUMN_NAME
				LEFT JOIN #table_columns_starting_ending_age d on a.TABLE_NAME = d.TABLE_NAME
				
				set @sql =  left (@SQL,len(@sql)-len('union')-1)+ ' order by [name] asc,x asc'
			end
		end

	--PRINT @SQL	
	EXEC sp_sqlexec @SQL
end
GO
/****** Object:  StoredProcedure [versions].[ProduceResults_V0]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [versions].[ProduceResults_V0] @string varchar(max) = null
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	drop table if exists #data--212,219,2000
	drop table if exists #columnsToSearch
	declare @chartType varchar(256)
	declare @countryIds varchar(300)	
	declare @columnNames varchar(1000)
	declare @AgreegateFunction varchar(20)
	declare @ChooseYear varchar(10)
	declare @ChoosingGroups varchar(100)
	declare @YearAggregation varchar(10)

	declare @oneCountryFlg tinyint = case when CHARINDEX(',',@countryIds) = 0 then 1 else 0 end
	declare @oneColumnIndiceFlg tinyint = case when CHARINDEX(',',@columnNames) = 0 then 1 else 0 end

	select *,ROW_NUMBER() over (order by (select null)) rn into #data from string_split(@string,'/')
	--select * from #data
	select @chartType = a.[value] from #data a where a.rn = 3
	select @countryIds = a.[value] from #data a where a.rn = 5
	select @columnNames = a.[value] from #data a where a.rn = 7
	select @AgreegateFunction = a.[value] from #data a where a.rn = 9
	select @ChooseYear = a.[value] from #data a where a.rn = 11
	select @ChoosingGroups = a.[value] from #data a where a.rn = 13
	select @YearAggregation = a.[value] from #data a where a.rn = 15

	select 
		[value] as COLUMN_NAME
		,ROW_NUMBER() over ( order by  (select null)) rn
		into #columnsToSearch from string_split(@columnNames,',')

	declare @ifSql varchar(max) = ''
	if @ChoosingGroups <> 'none'--an thelw pleiada apo xwres
	begin
		declare @groupType varchar(100) = substring(@ChoosingGroups,1,charindex('.',@ChoosingGroups)-1)
		declare @groupDerscription varchar(100) = substring(@ChoosingGroups,charindex('.',@ChoosingGroups)+1,len(@ChoosingGroups)-charindex('.',@ChoosingGroups))
		
		--select @groupType,@groupDerscription
		
		select @ifSql = @ifSql + 'select COUNTRY_ID from countries where '+COLUMN_NAME + ' like '+''''+@groupDerscription+'''' from INFORMATION_SCHEMA.COLUMNS a where a.TABLE_NAME = 'countries' and a.COLUMN_NAME = 'C_'+@groupType
		 
	end
	
	declare @sql varchar(max) = ''
	if @chartType = 'line' 
	begin
		if @ChoosingGroups = 'none' and CHARINDEX(',',@countryIds) = 0--we want  data for more than one year
		begin
			select @sql = @sql+
					'select  '+char(10)
					+''''+@chartType+''''+'as [text] ,'+char(10)
					+''''+ltrim(rtrim(DESCRIPTIONS))+''''+' as [name],'+char(10)		
					+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR as x,'+char(10)
					+(CASE WHEN LEN(@countryIds) >1 and @AgreegateFunction <> 'none' THEN +''''+@AgreegateFunction+'(' ELSE '' END)+'ISNULL(' +a.COLUMN_NAME+',0)'+(CASE WHEN LEN(@countryIds) >1 and @AgreegateFunction <> 'none' THEN +')' ELSE '' END)+' AS y'+char(10)+
					' from '+TABLE_CATALOG+'.'+TABLE_SCHEMA+'.'+TABLE_NAME+
					' where '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID IN ('+case when @countryIds = 'none' and @ChoosingGroups <> 'none' then @ifSql else @countryIds end +')' 
					+ (CASE WHEN LEN(@countryIds) >1 and @AgreegateFunction <> 'none' THEN +'GROUP BY '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR' ELSE '' END)
					--+char(10)+ ' order by '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR asc,[name] asc'
					+char(10)+'union all'+char(10)
				from INFORMATION_SCHEMA.COLUMNS a 
				inner join ELEMENTS_TO_CHART b on a.COLUMN_NAME = b.COLUMN_NAME
				inner join #columnsToSearch c on b.COLUMN_NAME = c.COLUMN_NAME
				
			set @sql =  left (@SQL,len(@sql)-len('union all')-1)+ ' order by [name] asc,x asc'
		end	
		if @ChoosingGroups <> 'none' or CHARINDEX(',',@countryIds) <> 0
		begin
			select @sql = @sql+
				'select  '+char(10)
				+''''+@chartType+''''+'as [text] ,'+char(10)
				+(case when @oneColumnIndiceFlg = 1 then 'c.C_DISPLAY_NAME' else 'c.C_DISPLAY_NAME'+' + '+''''+' - '+ltrim(rtrim(DESCRIPTIONS)) + '''' end)+' as [name],'+char(10)		
				+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR as x,'+char(10)
				+(CASE WHEN LEN(@countryIds) >1 and @AgreegateFunction <> 'none' THEN +''''+@AgreegateFunction+'(' ELSE '' END)+'ISNULL(' +a.COLUMN_NAME+',0)'+(CASE WHEN LEN(@countryIds) >1 and @AgreegateFunction <> 'none' THEN +')' ELSE '' END)+' AS y'+char(10)+
				' from '+TABLE_CATALOG+'.'+TABLE_SCHEMA+'.'+TABLE_NAME+char(10)
				+'inner join countries c on '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID = c.country_id'+
				' where '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID IN ('+case when @countryIds = 'none' and @ChoosingGroups <> 'none' then @ifSql else @countryIds end +')' 
				+ (CASE WHEN LEN(@countryIds) >1 and @AgreegateFunction <> 'none' THEN +'GROUP BY '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR' ELSE '' END)
				--+char(10)+ ' order by '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR asc,[name] asc'
				+char(10)+'union'+char(10)		
			from INFORMATION_SCHEMA.COLUMNS a 
			inner join ELEMENTS_TO_CHART b on a.COLUMN_NAME = b.COLUMN_NAME
			inner join #columnsToSearch c on b.COLUMN_NAME = c.COLUMN_NAME
			
			set @sql =  left (@SQL,len(@sql)-len('union')-1)+ ' order by [name] asc,x asc'
		end
	end

	if @chartType = 'scatter' 
	begin
		if (select count(*) from #columnsToSearch) <>2 --an exoume den dialexei akrivws 2 sthles
		begin
			select '' as [text],'' as [name],'' as [x], '' as [y]
		end
		select @sql = @sql+
				'select  '+char(10)
				+''''+@chartType+''''+'as [text] ,'+char(10)
				+'c.C_DISPLAY_NAME'+' as [name],'+char(10)		
				+(select aa.COLUMN_NAME from #columnsToSearch aa where rn = 1)+ ' as x,'+char(10)
				+(select aa.COLUMN_NAME from #columnsToSearch aa where rn = 2)+ ' AS y'+char(10)+
				' from '+TABLE_CATALOG+'.'+TABLE_SCHEMA+'.'+TABLE_NAME+char(10)
				+'inner join countries c on '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID = c.country_id'+
				' where '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID IN ('+case when @countryIds = 'none' and @ChoosingGroups <> 'none' then @ifSql else @countryIds end +')' 
				+ (CASE WHEN LEN(@countryIds) >1 and @AgreegateFunction <> 'none' THEN +'GROUP BY '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR' ELSE '' END)
				--+char(10)+ ' order by '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR asc,[name] asc'
				+char(10)+'union'+char(10)		
			from INFORMATION_SCHEMA.COLUMNS a 
			inner join ELEMENTS_TO_CHART b on a.COLUMN_NAME = b.COLUMN_NAME
			inner join #columnsToSearch c on b.COLUMN_NAME = c.COLUMN_NAME

			set @sql =  left (@SQL,len(@sql)-len('union')-1)+ ' order by [name] asc,x asc'
	end
		   
	if @chartType = 'bar' 
		begin
			if @ChoosingGroups = 'none' and CHARINDEX(',',@countryIds) = 0--we want  data for more than one year
			begin
				select @sql = @sql+
						'select  '+char(10)
						+''''+@chartType+''''+'as [text] ,'+char(10)
						+''''+ltrim(rtrim(DESCRIPTIONS))+''''+' as [name],'+char(10)		
						+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR as x,'+char(10)
						+(CASE WHEN LEN(@countryIds) >1 and @AgreegateFunction <> 'none' THEN +''''+@AgreegateFunction+'(' ELSE '' END)+'ISNULL(' +a.COLUMN_NAME+',0)'+(CASE WHEN LEN(@countryIds) >1 and @AgreegateFunction <> 'none' THEN +')' ELSE '' END)+' AS y'+char(10)+
						' from '+TABLE_CATALOG+'.'+TABLE_SCHEMA+'.'+TABLE_NAME+
						' where '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID IN ('+case when @countryIds = 'none' and @ChoosingGroups <> 'none' then @ifSql else @countryIds end +')' 
						+ (CASE WHEN LEN(@countryIds) >1 and @AgreegateFunction <> 'none' THEN +'GROUP BY '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR' ELSE '' END)
						--+char(10)+ ' order by '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR asc,[name] asc'
						+char(10)+'union all'+char(10)
					from INFORMATION_SCHEMA.COLUMNS a 
					inner join ELEMENTS_TO_CHART b on a.COLUMN_NAME = b.COLUMN_NAME
					inner join #columnsToSearch c on b.COLUMN_NAME = c.COLUMN_NAME
					
				set @sql =  left (@SQL,len(@sql)-len('union all')-1)+ ' order by [name] asc,x asc'
			end	
			if @ChoosingGroups <> 'none' or CHARINDEX(',',@countryIds) <> 0
			begin
				select @sql = @sql+
					'select  '+char(10)
					+''''+@chartType+''''+'as [text] ,'+char(10)
					+(case when @oneColumnIndiceFlg = 1 then 'c.C_DISPLAY_NAME' else 'c.C_DISPLAY_NAME'+' + '+''''+' - '+ltrim(rtrim(DESCRIPTIONS)) + '''' end)+' as [name],'+char(10)		
					+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR as x,'+char(10)
					+(CASE WHEN LEN(@countryIds) >1 and @AgreegateFunction <> 'none' THEN +''''+@AgreegateFunction+'(' ELSE '' END)+'ISNULL(' +a.COLUMN_NAME+',0)'+(CASE WHEN LEN(@countryIds) >1 and @AgreegateFunction <> 'none' THEN +')' ELSE '' END)+' AS y'+char(10)+
					' from '+TABLE_CATALOG+'.'+TABLE_SCHEMA+'.'+TABLE_NAME+char(10)
					+'inner join countries c on '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID = c.country_id'+
					' where '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID IN ('+case when @countryIds = 'none' and @ChoosingGroups <> 'none' then @ifSql else @countryIds end +')' 
					+ (CASE WHEN LEN(@countryIds) >1 and @AgreegateFunction <> 'none' THEN +'GROUP BY '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR' ELSE '' END)
					--+char(10)+ ' order by '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR asc,[name] asc'
					+char(10)+'union'+char(10)		
				from INFORMATION_SCHEMA.COLUMNS a 
				inner join ELEMENTS_TO_CHART b on a.COLUMN_NAME = b.COLUMN_NAME
				inner join #columnsToSearch c on b.COLUMN_NAME = c.COLUMN_NAME
				
				set @sql =  left (@SQL,len(@sql)-len('union')-1)+ ' order by [name] asc,x asc'
			end
		end

	
	EXEC sp_sqlexec @SQL
	--Select IBC_YEAR as [YEAR],isnull(IBC_GDP_PER_CAPITA,0) as GDP_PER_CAPITA from INDEXES_BY_COUNTRY a where a.ibc_country_id = 1 order by IBC_YEAR
end
GO
/****** Object:  StoredProcedure [versions].[ProduceResults_V1]    Script Date: 27/5/2023 1:14:05 πμ ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
create PROCEDURE [versions].[ProduceResults_V1] @string varchar(max) = null
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	drop table if exists #data--212,219,2000
	drop table if exists #columnsToSearch
	drop table if exists #yearsGap
	drop table if exists #table_columns_starting_ending_age

	CREATE TABLE #table_columns_starting_ending_age
	(
		TABLE_NAME VARCHAR(300)
		,STARTING_AGE VARCHAR(100)
		,ENDING_AGE VARCHAR(100)
	)

	declare @chartType varchar(256)
	declare @countryIds varchar(300)	
	declare @columnNames varchar(1000)
	declare @AgreegateFunction varchar(20)
	declare @ChooseYear varchar(10)
	declare @ChoosingGroups varchar(100)
	declare @YearAggregation varchar(10)

	declare @IndiceHasAflg tinyint = 0
	
	
	declare @oneCountryFlg tinyint = case when CHARINDEX(',',@countryIds) = 0 then 1 else 0 end
	declare @oneColumnIndiceFlg tinyint = case when CHARINDEX(',',@columnNames) = 0 then 1 else 0 end
	declare @starting_age varchar(3)
	declare @ending_age varchar(3)

	select *,ROW_NUMBER() over (order by (select null)) rn into #data from string_split(@string,'/')
	--select * from #data
	select @chartType = a.[value] from #data a where a.rn = 3
	select @countryIds = a.[value] from #data a where a.rn = 5
	select @columnNames = a.[value] from #data a where a.rn = 7
	select @AgreegateFunction = a.[value] from #data a where a.rn = 9
	select @ChooseYear = a.[value] from #data a where a.rn = 11
	select @ChoosingGroups = a.[value] from #data a where a.rn = 13
	select @YearAggregation = a.[value] from #data a where a.rn = 15

	SET @AgreegateFunction = CASE WHEN @AgreegateFunction = 'NONE' AND @YearAggregation <> 'NONE' THEN 'AVG' ELSE @AgreegateFunction END
	
	select 
		[value] as COLUMN_NAME
		,ROW_NUMBER() over ( order by  (select null)) rn
		into #columnsToSearch from string_split(@columnNames,',')

	declare @ifSql varchar(max) = ''
	if @ChoosingGroups <> 'none'--an thelw pleiada apo xwres
	begin
		declare @groupType varchar(100) = substring(@ChoosingGroups,1,charindex('.',@ChoosingGroups)-1)
		declare @groupDerscription varchar(100) = substring(@ChoosingGroups,charindex('.',@ChoosingGroups)+1,len(@ChoosingGroups)-charindex('.',@ChoosingGroups))
		
		--select @groupType,@groupDerscription
		
		select @ifSql = @ifSql + 'select COUNTRY_ID from countries where '+COLUMN_NAME + ' like '+''''+@groupDerscription+'''' from INFORMATION_SCHEMA.COLUMNS a where a.TABLE_NAME = 'countries' and a.COLUMN_NAME = 'C_'+@groupType
		 
	end

	--vriskoume an exoyme kolona me xronia ilikias apo ews
	set @oneColumnIndiceFlg = case when CHARINDEX('-',@ChooseYear)<>0 then 1 else 0 end
	if @oneColumnIndiceFlg = 1 
	begin 
		
		select convert(int,[value]) as [value]
		,ROW_NUMBER() over ( order by convert(int,[value])) rn 		
		into #yearsGap
		from string_split(@ChooseYear,'-')
		set @starting_age = (select convert(varchar(3),[value]) from #yearsGap where rn=1)
		set @ending_age = (select convert(varchar(3),[value]) from #yearsGap where rn=2)

		--get flaged columns from table
		;with TABLE_NAMES_OF_FALGED_COLUMNS AS (
		select distinct TABLE_NAME from INFORMATION_SCHEMA.columns a
		inner join #columnsToSearch b on a.COLUMN_NAME = b.COLUMN_NAME
		)
		INSERT INTO #table_columns_starting_ending_age
		SELECT 
			PIV.TABLE_NAME
			,MAX(PIV.[1]) STARTING_AGE
			,MAX(PIV.[2]) ENDING_AGE
			
		FROM (
		SELECT 
			A.TABLE_NAME
			,B.COLUMN_NAME 
			,ROW_NUMBER() over (PARTITION BY A.TABLE_NAME order by B.COLUMN_NAME desc) rn 		
		FROM TABLE_NAMES_OF_FALGED_COLUMNS A
		INNER JOIN INFORMATION_SCHEMA.COLUMNS B ON A.TABLE_NAME = B.TABLE_NAME
		WHERE B.COLUMN_NAME LIKE '%STARTING_AGE%' 
		OR B.COLUMN_NAME LIKE '%ENDING_AGE%'
		) T
		pivot
		(
			MAX(t.COLUMN_NAME)  
			FOR rn IN ([1], [2])  
		) as piv
		GROUP BY PIV.TABLE_NAME
	end	
	--SELECT * FROM #table_columns_starting_ending_age

	declare @sql varchar(max) = ''
	if @chartType = 'line' 
	begin
		if @ChoosingGroups = 'none' and CHARINDEX(',',@countryIds) = 0--we want  data for more than one year
		begin
			select @sql = @sql+
					'select  '+char(10)
					+''''+@chartType+''''+'as [text] ,'+char(10)
					+''''+ltrim(rtrim(DESCRIPTIONS))+''''+' as [name],'+char(10)		
					+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR as x,'+char(10)
					+(CASE WHEN @YearAggregation <> 'none' THEN +@AgreegateFunction+'(' ELSE '' END)+'ISNULL(' +a.COLUMN_NAME+',0)'+(CASE WHEN @AgreegateFunction <> 'none' THEN +')' ELSE '' END)+' AS y'+char(10)+
					' from '+TABLE_CATALOG+'.'+TABLE_SCHEMA+'.'+a.TABLE_NAME+
					' where '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID IN ('+case when @countryIds = 'none' and @ChoosingGroups <> 'none' then @ifSql else @countryIds end +')' 
					+case when d.STARTING_AGE is not null then (case when @oneColumnIndiceFlg = 1 then char(10)+' and '+ d.STARTING_AGE+' = '+@starting_age +' and '+d.ENDING_AGE+' = '+@ending_age else '' end ) else '' end+
					+(
						CASE 
							WHEN @YearAggregation <> 'none' THEN 
							+CHAR(10)+'group by '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR'+' having ('+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR'  +'- 1950 ) % 7 = 0 AND '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR'+' <> 0 ' 							
							ELSE 
							'' 
						END
					)

					--+char(10)+ ' order by '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR asc,[name] asc'
					+char(10)+'union all'+char(10)
				from INFORMATION_SCHEMA.COLUMNS a 
				inner join ELEMENTS_TO_CHART b on a.COLUMN_NAME = b.COLUMN_NAME
				inner join #columnsToSearch c on b.COLUMN_NAME = c.COLUMN_NAME
				LEFT JOIN #table_columns_starting_ending_age d on a.TABLE_NAME = d.TABLE_NAME
				
			set @sql =  left (@SQL,len(@sql)-len('union all')-1)+ ' order by [name] asc,x asc'
		end	
		if @ChoosingGroups <> 'none' or CHARINDEX(',',@countryIds) <> 0
		begin
			select @sql = @sql+
				'select  '+char(10)
				+''''+@chartType+''''+'as [text] ,'+char(10)
				+(case when @oneColumnIndiceFlg = 1 then 'c.C_DISPLAY_NAME' else 'c.C_DISPLAY_NAME'+' + '+''''+' - '+ltrim(rtrim(DESCRIPTIONS)) + '''' end)+' as [name],'+char(10)		
				+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR as x,'+char(10)
				+(CASE WHEN @YearAggregation <> 'none'  THEN +@AgreegateFunction+'(' ELSE '' END)+'ISNULL(' +a.COLUMN_NAME+',0)'+(CASE WHEN  @YearAggregation <> 'none' THEN +')' ELSE '' END)+' AS y'+char(10)+
				' from '+TABLE_CATALOG+'.'+TABLE_SCHEMA+'.'+a.TABLE_NAME+char(10)
				+'inner join countries c on '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID = c.country_id'+
				' where '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID IN ('+case when @countryIds = 'none' and @ChoosingGroups <> 'none' then @ifSql else @countryIds end +')' 
				+case when d.STARTING_AGE is not null then (case when @oneColumnIndiceFlg = '1' then char(10)+' and '+ d.STARTING_AGE+' = '+@starting_age +' and '+d.ENDING_AGE+' = '+@ending_age else '' end ) else '' end+
				+(
						CASE 
							WHEN @YearAggregation <> 'none' THEN 
							+CHAR(10)+'group by '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR,c.C_DISPLAY_NAME'+' having ('+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR'  +'- 1950 ) % 7 = 0 AND '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR'+' <> 0 ' 							
							ELSE 
							'' 
						END
					)
				+char(10)+'union'+char(10)		
			from INFORMATION_SCHEMA.COLUMNS a 
			inner join ELEMENTS_TO_CHART b on a.COLUMN_NAME = b.COLUMN_NAME
			inner join #columnsToSearch c on b.COLUMN_NAME = c.COLUMN_NAME
			LEFT JOIN #table_columns_starting_ending_age d on a.TABLE_NAME = d.TABLE_NAME

			set @sql =  left (@SQL,len(@sql)-len('union')-1)+ ' order by [name] asc,x asc'
		end
	end
	
	if @chartType = 'scatter' 
	begin
		if (select count(*) from #columnsToSearch) <>2 --an exoume den dialexei akrivws 2 sthles
		begin
			select '' as [text],'' as [name],'' as [x], '' as [y]
		end
		select @sql = @sql+
				'select  '+char(10)
				+''''+@chartType+''''+'as [text] ,'+char(10)
				+'c.C_DISPLAY_NAME'+' as [name],'+char(10)		
				+(CASE WHEN @YearAggregation <> 'none'  THEN +@AgreegateFunction+'(' ELSE '' END)+'ISNULL(' +(select aa.COLUMN_NAME from #columnsToSearch aa where rn = 1)+',0)'+(CASE WHEN  @YearAggregation <> 'none' THEN +')' ELSE '' END)+ ' as x,'+char(10)
				+(CASE WHEN @YearAggregation <> 'none'  THEN +@AgreegateFunction+'(' ELSE '' END)+'ISNULL(' +(select aa.COLUMN_NAME from #columnsToSearch aa where rn = 2)+',0)'+(CASE WHEN  @YearAggregation <> 'none' THEN +')' ELSE '' END)+ ' AS y'+char(10)+
				' from '+TABLE_CATALOG+'.'+TABLE_SCHEMA+'.'+a.TABLE_NAME+char(10)
				+'inner join countries c on '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID = c.country_id'+
				' where '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID IN ('+case when @countryIds = 'none' and @ChoosingGroups <> 'none' then @ifSql else @countryIds end +')' 
				+case when d.STARTING_AGE is not null then (case when @oneColumnIndiceFlg = 1 then char(10)+' and '+ d.STARTING_AGE+' = '+@starting_age +' and '+d.ENDING_AGE+' = '+@ending_age else '' end ) else '' end+
				--+ (CASE WHEN LEN(@countryIds) >1 and @AgreegateFunction <> 'none' THEN +'GROUP BY '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR' ELSE '' END)
				+(
						CASE 
							WHEN @YearAggregation <> 'none' THEN 
							+CHAR(10)+'group by '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR, c.C_DISPLAY_NAME'+' having ('+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR'  +'- 1950 ) % 7 = 0 AND '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR'+' <> 0 ' 							
							ELSE 
							'' 
						END
					)
				+char(10)+'union'+char(10)		
			from INFORMATION_SCHEMA.COLUMNS a 
			inner join ELEMENTS_TO_CHART b on a.COLUMN_NAME = b.COLUMN_NAME
			inner join #columnsToSearch c on b.COLUMN_NAME = c.COLUMN_NAME
			LEFT JOIN #table_columns_starting_ending_age d on a.TABLE_NAME = d.TABLE_NAME

			set @sql =  left (@SQL,len(@sql)-len('union')-1)+ ' order by [name] asc,x asc'
	end
		   
	if @chartType = 'bar' 
		begin
			if @ChoosingGroups = 'none' and CHARINDEX(',',@countryIds) = 0--we want  data for more than one year
			begin
				select @sql = @sql+
						'select  '+char(10)
						+''''+@chartType+''''+'as [text] ,'+char(10)
						+''''+ltrim(rtrim(DESCRIPTIONS))+''''+' as [name],'+char(10)		
						+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR as x,'+char(10)
						+(CASE WHEN @YearAggregation <> 'none'  THEN +@AgreegateFunction+'(' ELSE '' END)+'ISNULL(' +a.COLUMN_NAME+',0)'+(CASE WHEN  @YearAggregation <> 'none' THEN +')' ELSE '' END)+' AS y'+char(10)+
						' from '+TABLE_CATALOG+'.'+TABLE_SCHEMA+'.'+a.TABLE_NAME+
						' where '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID IN ('+case when @countryIds = 'none' and @ChoosingGroups <> 'none' then @ifSql else @countryIds end +')' 
						+case when d.STARTING_AGE is not null then (case when @oneColumnIndiceFlg = 1 then char(10)+' and '+ d.STARTING_AGE+' = '+@starting_age +' and '+d.ENDING_AGE+' = '+@ending_age else '' end ) else '' end+
						+ (CASE WHEN LEN(@countryIds) >1 and @AgreegateFunction <> 'none' THEN +'GROUP BY '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR' ELSE '' END)
						+(
							CASE 
								WHEN @YearAggregation <> 'none' THEN 
								+CHAR(10)+'group by '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR'+' having ('+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR'  +'- 1950 ) % 7 = 0 AND '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR'+' <> 0 ' 							
								ELSE 
								'' 
							END
						)
						+char(10)+'union all'+char(10)
					from INFORMATION_SCHEMA.COLUMNS a 
					inner join ELEMENTS_TO_CHART b on a.COLUMN_NAME = b.COLUMN_NAME
					inner join #columnsToSearch c on b.COLUMN_NAME = c.COLUMN_NAME
					LEFT JOIN #table_columns_starting_ending_age d on a.TABLE_NAME = d.TABLE_NAME
					
				set @sql =  left (@SQL,len(@sql)-len('union all')-1)+ ' order by [name] asc,x asc'
			end	
			if @ChoosingGroups <> 'none' or CHARINDEX(',',@countryIds) <> 0
			begin
				select @sql = @sql+
					'select  '+char(10)
					+''''+@chartType+''''+'as [text] ,'+char(10)
					+(case when @oneColumnIndiceFlg = 1 then 'c.C_DISPLAY_NAME' else 'c.C_DISPLAY_NAME'+' + '+''''+' - '+ltrim(rtrim(DESCRIPTIONS)) + '''' end)+' as [name],'+char(10)		
					+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR as x,'+char(10)
					+(CASE WHEN @YearAggregation <> 'none'  THEN +@AgreegateFunction+'(' ELSE '' END)+'ISNULL(' +a.COLUMN_NAME+',0)'+(CASE WHEN  @YearAggregation <> 'none' THEN +')' ELSE '' END)+' AS y'+char(10)+
					' from '+TABLE_CATALOG+'.'+TABLE_SCHEMA+'.'+a.TABLE_NAME+char(10)
					+'inner join countries c on '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID = c.country_id'+
					' where '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'COUNTRY_ID IN ('+case when @countryIds = 'none' and @ChoosingGroups <> 'none' then @ifSql else @countryIds end +')' 
					+case when d.STARTING_AGE is not null then (case when @oneColumnIndiceFlg = 1 then char(10)+' and '+ d.STARTING_AGE+' = '+@starting_age +' and '+d.ENDING_AGE+' = '+@ending_age else '' end ) else '' end+					
					+(
						CASE 
							WHEN @YearAggregation <> 'none' THEN 
							+CHAR(10)+'group by '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR,c.C_DISPLAY_NAME'+' having ('+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR'  +'- 1950 ) % 7 = 0 AND '+substring(a.COLUMN_NAME,1,CHARINDEX('_',a.COLUMN_NAME))+'YEAR'+' <> 0 ' 							
							ELSE 
							'' 
						END
					)
					+char(10)+'union'+char(10)		
				from INFORMATION_SCHEMA.COLUMNS a 
				inner join ELEMENTS_TO_CHART b on a.COLUMN_NAME = b.COLUMN_NAME
				inner join #columnsToSearch c on b.COLUMN_NAME = c.COLUMN_NAME
				LEFT JOIN #table_columns_starting_ending_age d on a.TABLE_NAME = d.TABLE_NAME
				
				set @sql =  left (@SQL,len(@sql)-len('union')-1)+ ' order by [name] asc,x asc'
			end
		end

	
	EXEC sp_sqlexec @SQL
	--Select IBC_YEAR as [YEAR],isnull(IBC_GDP_PER_CAPITA,0) as GDP_PER_CAPITA from INDEXES_BY_COUNTRY a where a.ibc_country_id = 1 order by IBC_YEAR
end
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPane1', @value=N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "COUNTRIES"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 395
            End
            DisplayFlags = 280
            TopColumn = 2
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'CountriesList'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_DiagramPaneCount', @value=1 , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'VIEW',@level1name=N'CountriesList'
GO
